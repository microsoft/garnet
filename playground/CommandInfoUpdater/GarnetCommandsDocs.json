[
  {
    "Command": "CLIENT_KILL",
    "Name": "CLIENT|KILL",
    "Summary": "Terminates open connections.",
    "Group": "Connection",
    "Complexity": "O(N) where N is the number of client connections",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "FILTER",
        "Type": "OneOf",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "OLD-FORMAT",
            "DisplayText": "ip:port",
            "Type": "String"
          },
          {
            "TypeDiscriminator": "RespCommandContainerArgument",
            "Name": "NEW-FORMAT",
            "Type": "OneOf",
            "ArgumentFlags": "Multiple",
            "Arguments": [
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "CLIENT-ID",
                "DisplayText": "client-id",
                "Type": "Integer",
                "Token": "ID",
                "ArgumentFlags": "Optional"
              },
              {
                "TypeDiscriminator": "RespCommandContainerArgument",
                "Name": "CLIENT-TYPE",
                "Type": "OneOf",
                "Token": "TYPE",
                "ArgumentFlags": "Optional",
                "Arguments": [
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "NORMAL",
                    "DisplayText": "normal",
                    "Type": "PureToken",
                    "Token": "NORMAL"
                  },
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "MASTER",
                    "DisplayText": "master",
                    "Type": "PureToken",
                    "Token": "MASTER"
                  },
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "SLAVE",
                    "DisplayText": "slave",
                    "Type": "PureToken",
                    "Token": "SLAVE"
                  },
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "REPLICA",
                    "DisplayText": "replica",
                    "Type": "PureToken",
                    "Token": "REPLICA"
                  },
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "PUBSUB",
                    "DisplayText": "pubsub",
                    "Type": "PureToken",
                    "Token": "PUBSUB"
                  }
                ]
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "USERNAME",
                "DisplayText": "username",
                "Type": "String",
                "Token": "USER",
                "ArgumentFlags": "Optional"
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "ADDR",
                "DisplayText": "ip:port",
                "Type": "String",
                "Token": "ADDR",
                "ArgumentFlags": "Optional"
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "LADDR",
                "DisplayText": "ip:port",
                "Type": "String",
                "Token": "LADDR",
                "ArgumentFlags": "Optional"
              },
              {
                "TypeDiscriminator": "RespCommandContainerArgument",
                "Name": "SKIPME",
                "Type": "OneOf",
                "Token": "SKIPME",
                "ArgumentFlags": "Optional",
                "Arguments": [
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "YES",
                    "DisplayText": "yes",
                    "Type": "PureToken",
                    "Token": "YES"
                  },
                  {
                    "TypeDiscriminator": "RespCommandBasicArgument",
                    "Name": "NO",
                    "DisplayText": "no",
                    "Type": "PureToken",
                    "Token": "NO"
                  }
                ]
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "MAXAGE",
                "DisplayText": "maxage",
                "Type": "Integer",
                "Token": "MAXAGE",
                "ArgumentFlags": "Optional"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "Command": "COMMITAOF",
    "Name": "COMMITAOF",
    "Group": "Server",
    "Summary": "Commit to append-only file."
  },
  {
    "Command": "COSCAN",
    "Name": "COSCAN",
    "Group": "Generic",
    "Summary": "Iterates over members of a collection object.",
    "Complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "CURSOR",
        "DisplayText": "cursor",
        "Type": "Integer"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "PATTERN",
        "DisplayText": "pattern",
        "Type": "Pattern",
        "Token": "MATCH",
        "ArgumentFlags": "Optional"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "COUNT",
        "DisplayText": "count",
        "Type": "Integer",
        "Token": "COUNT",
        "ArgumentFlags": "Optional"
      }
    ]
  },
  {
    "Command": "FORCEGC",
    "Name": "FORCEGC",
    "Summary": "Forces garbage collection.",
    "Group": "Server"
  },
  {
    "Command": "HCOLLECT",
    "Name": "HCOLLECT",
    "Summary": "Manually trigger deletion of expired fields from memory",
    "Group": "Hash"
  },
  {
    "Command": "SECONDARYOF",
    "Name": "SECONDARYOF",
    "Summary": "Configures a server as secondary of another, or promotes it to a primary.",
    "Group": "Server",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "ARGS",
        "Type": "OneOf",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandContainerArgument",
            "Name": "HOST-PORT",
            "Type": "Block",
            "Arguments": [
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "HOST",
                "DisplayText": "host",
                "Type": "String"
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "PORT",
                "DisplayText": "port",
                "Type": "Integer"
              }
            ]
          },
          {
            "TypeDiscriminator": "RespCommandContainerArgument",
            "Name": "NO-ONE",
            "Type": "Block",
            "Arguments": [
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "NO",
                "DisplayText": "no",
                "Type": "PureToken",
                "Token": "NO"
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "ONE",
                "DisplayText": "one",
                "Type": "PureToken",
                "Token": "ONE"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "Command": "REGISTERCS",
    "Name": "REGISTERCS",
    "Group": "Server",
    "Summary": "Registers custom C# commands in Garnet.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "CMD",
        "Type": "Block",
        "ArgumentFlags": "Multiple",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandContainerArgument",
            "Name": "CMDTYPE",
            "Type": "OneOf",
            "Arguments": [
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "READ",
                "DisplayText": "read",
                "Type": "PureToken",
                "Token": "READ"
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "RMW",
                "DisplayText": "rmw",
                "Type": "PureToken",
                "Token": "RMW"
              },
              {
                "TypeDiscriminator": "RespCommandBasicArgument",
                "Name": "TXN",
                "DisplayText": "txn",
                "Type": "PureToken",
                "Token": "TXN"
              }
            ]
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "NAME",
            "Summary": "Name of the command to register",
            "DisplayText": "cmdName",
            "Type": "String"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "NUMPARAMS",
            "Summary": "Numer of parameters of the command to register",
            "DisplayText": "numParams",
            "Type": "Integer"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "CLASSNAME",
            "Summary": "Name of class defining the command to register",
            "DisplayText": "className",
            "Type": "String"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "EXPTICKS",
            "Summary": "Expiry of the command to register (in ticks)",
            "DisplayText": "expTicks",
            "Type": "Integer",
            "ArgumentFlags": "Optional"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "OBJCMDNAME",
            "Summary": "The object command name, if applicable",
            "DisplayText": "objCmdName",
            "Type": "String",
            "ArgumentFlags": "Optional"
          }
        ]
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "INFO",
        "Summary": "Path to JSON-serialized command info for registered commands",
        "DisplayText": "infoPath",
        "Type": "String",
        "Token": "INFO",
        "ArgumentFlags": "Optional"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "DOCS",
        "Summary": "Path to JSON-serialized command docs for registered commands",
        "DisplayText": "docsPath",
        "Type": "String",
        "Token": "DOCS",
        "ArgumentFlags": "Optional"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "SRC",
        "Summary": "Source paths containing classes defining command to register",
        "DisplayText": "srcPath",
        "Type": "String",
        "Token": "SRC",
        "ArgumentFlags": "Multiple"
      }
    ]
  },
  {
    "Command": "RUNTXP",
    "Name": "RUNTXP",
    "Group": "Transactions",
    "Summary": "Run registered transaction in Garnet.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "TXNID",
        "Summary": "Registered transaction ID",
        "DisplayText": "txnId",
        "Type": "Integer"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "TXNPARAM",
        "Summary": "Transaction parameter",
        "DisplayText": "param",
        "Type": "String",
        "ArgumentFlags": "Multiple"
      }
    ]
  },
  {
    "Command": "WATCHMS",
    "Name": "WATCHMS",
    "Group": "Transactions",
    "Summary": "Monitors changes to keys in main store to determine the execution of a transaction.",
    "Complexity": "O(1) for every key.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "ArgumentFlags": "Multiple",
        "KeySpecIndex": 0
      }
    ]
  },
  {
    "Command": "WATCHOS",
    "Name": "WATCHOS",
    "Group": "Transactions",
    "Summary": "Monitors changes to keys in object store to determine the execution of a transaction.",
    "Complexity": "O(1) for every key.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "ArgumentFlags": "Multiple",
        "KeySpecIndex": 0
      }
    ]
  },
  {
    "Command": "ASYNC",
    "Name": "ASYNC",
    "Group": "Generic",
    "Summary": "Start, stop or issue a barrier command for a series of async operations.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "ARGS",
        "Type": "OneOf",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "ON",
            "DisplayText": "on",
            "Type": "PureToken",
            "Token": "ON"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "OFF",
            "DisplayText": "off",
            "Type": "PureToken",
            "Token": "OFF"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "BARRIER",
            "DisplayText": "barrier",
            "Type": "PureToken",
            "Token": "BARRIER"
          }
        ]
      }
    ]
  },
  {
    "Command": "MODULE",
    "Name": "MODULE",
    "Group": "Server",
    "Summary": "A container for module commands.",
    "Complexity": "Depends on subcommand.",
    "SubCommands": [
      {
        "Command": "MODULE_LOADCS",
        "Name": "MODULE|LOADCS",
        "Group": "Server",
        "Summary": "Load a C# module in Garnet.",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "SRCPATH",
            "Summary": "Source path to module definition",
            "DisplayText": "srcPath",
            "Type": "String"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "MODULEARG",
            "Summary": "Module argument",
            "DisplayText": "arg",
            "Type": "String",
            "ArgumentFlags": "Multiple"
          }
        ]
      }
    ]
  },
  {
    "Command": "GETIFNOTMATCH",
    "Name": "GETIFNOTMATCH",
    "Summary": "Gets the ETag and value if the key\u0027s current etag does not match the given etag.",
    "Group": "String",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "ETAG",
        "DisplayText": "etag",
        "Type": "Integer"
      }
    ]
  },
  {
    "Command": "GETWITHETAG",
    "Name": "GETWITHETAG",
    "Summary": "Gets the ETag and value for the key",
    "Group": "String",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      }
    ]
  },
  {
    "Command": "PURGEBP",
    "Name": "PURGEBP",
    "Group": "Cluster",
    "Summary": "Purge cluster buffer pool for manager type.",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "MANAGERTYPE",
        "Type": "OneOf",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "MIGRATIONMANAGER",
            "DisplayText": "migrationmanager",
            "Type": "PureToken",
            "Token": "MIGRATIONMANAGER"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "REPLICATIONMANAGER",
            "DisplayText": "replicationmanager",
            "Type": "PureToken",
            "Token": "REPLICATIONMANAGER"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "SERVERLISTENER",
            "DisplayText": "serverlistener",
            "Type": "PureToken",
            "Token": "SERVERLISTENER"
          }
        ]
      }
    ]
  },
  {
    "Command": "RENAME",
    "Name": "RENAME",
    "Summary": "Renames a key and overwrites the destination.",
    "Group": "Generic",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "NEWKEY",
        "DisplayText": "newkey",
        "Type": "Key",
        "KeySpecIndex": 1
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "WITHETAG",
        "DisplayText": "WITHETAG",
        "Type": "PureToken",
        "ArgumentFlags": "Optional",
        "Token": "WITHETAG"
      }
    ]
  },
  {
    "Command": "RENAMENX",
    "Name": "RENAMENX",
    "Summary": "Renames a key and overwrites the destination if the newkey does not exist.",
    "Group": "Generic",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "NEWKEY",
        "DisplayText": "newkey",
        "Type": "Key",
        "KeySpecIndex": 1
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "WITHETAG",
        "DisplayText": "WITHETAG",
        "Type": "PureToken",
        "ArgumentFlags": "Optional",
        "Token": "WITHETAG"
      }
    ]
  },
  {
    "Command": "SET",
    "Name": "SET",
    "Summary": "Sets the string value of a key, ignoring its type. The key is created if it doesn\u0027t exist.",
    "Group": "String",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "VALUE",
        "DisplayText": "value",
        "Type": "String"
      },
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "CONDITION",
        "Type": "OneOf",
        "ArgumentFlags": "Optional",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "NX",
            "DisplayText": "nx",
            "Type": "PureToken",
            "Token": "NX"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "XX",
            "DisplayText": "xx",
            "Type": "PureToken",
            "Token": "XX"
          }
        ]
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "GET",
        "DisplayText": "get",
        "Type": "PureToken",
        "Token": "GET",
        "ArgumentFlags": "Optional"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "WITHETAG",
        "DisplayText": "WITHETAG",
        "Type": "PureToken",
        "ArgumentFlags": "Optional",
        "Token": "WITHETAG"
      },
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "EXPIRATION",
        "Type": "OneOf",
        "ArgumentFlags": "Optional",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "SECONDS",
            "DisplayText": "seconds",
            "Type": "Integer",
            "Token": "EX"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "MILLISECONDS",
            "DisplayText": "milliseconds",
            "Type": "Integer",
            "Token": "PX"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "UNIX-TIME-SECONDS",
            "DisplayText": "unix-time-seconds",
            "Type": "UnixTime",
            "Token": "EXAT"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "UNIX-TIME-MILLISECONDS",
            "DisplayText": "unix-time-milliseconds",
            "Type": "UnixTime",
            "Token": "PXAT"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "KEEPTTL",
            "DisplayText": "keepttl",
            "Type": "PureToken",
            "Token": "KEEPTTL"
          }
        ]
      }
    ]
  },
  {
    "Command": "SETIFMATCH",
    "Name": "SETIFMATCH",
    "Summary": "Sets a key value pair with the given etag only if (1) the etag given in the request matches the already existing etag ; or (2) there was no existing value; or (3) the existing value was not associated with any etag and the sent etag was 0.",
    "Group": "String",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "VALUE",
        "DisplayText": "value",
        "Type": "String"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "ETAG",
        "DisplayText": "etag",
        "Type": "Integer"
      },
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "EXPIRATION",
        "Type": "OneOf",
        "ArgumentFlags": "Optional",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "SECONDS",
            "DisplayText": "seconds",
            "Type": "Integer",
            "Token": "EX"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "MILLISECONDS",
            "DisplayText": "milliseconds",
            "Type": "Integer",
            "Token": "PX"
          }
        ]
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "NOGET",
        "DisplayText": "noget",
        "Type": "PureToken",
        "Token": "NOGET",
        "ArgumentFlags": "Optional"
      }
    ]
  },
  {
    "Command": "SETIFGREATER",
    "Name": "SETIFGREATER",
    "Summary": "Sets a key value pair with the given etag only if (1) the etag given in the request is greater than the already existing etag ; or (2) there was no existing value; or (3) the existing value was not associated with any etag and the sent etag was greater than 0.",
    "Group": "String",
    "Complexity": "O(1)",
    "Arguments": [
      {
        "TypeDiscriminator": "RespCommandKeyArgument",
        "Name": "KEY",
        "DisplayText": "key",
        "Type": "Key",
        "KeySpecIndex": 0
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "VALUE",
        "DisplayText": "value",
        "Type": "String"
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "ETAG",
        "DisplayText": "etag",
        "Type": "Integer"
      },
      {
        "TypeDiscriminator": "RespCommandContainerArgument",
        "Name": "EXPIRATION",
        "Type": "OneOf",
        "ArgumentFlags": "Optional",
        "Arguments": [
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "SECONDS",
            "DisplayText": "seconds",
            "Type": "Integer",
            "Token": "EX"
          },
          {
            "TypeDiscriminator": "RespCommandBasicArgument",
            "Name": "MILLISECONDS",
            "DisplayText": "milliseconds",
            "Type": "Integer",
            "Token": "PX"
          }
        ]
      },
      {
        "TypeDiscriminator": "RespCommandBasicArgument",
        "Name": "NOGET",
        "DisplayText": "noget",
        "Type": "PureToken",
        "Token": "NOGET",
        "ArgumentFlags": "Optional"
      }
    ]
  },
  {
    "Command": "CLUSTER",
    "Name": "CLUSTER",
    "Summary": "A container for Redis Cluster internal commands.",
    "Group": "Cluster",
    "Complexity": "Depends on subcommand.",
    "SubCommands": [
      {
        "Command": "CLUSTER_PUBLISH",
        "Name": "CLUSTER|PUBLISH",
        "Summary": "Processes a forwarded published message from any node in the cluster",
        "Group": "Cluster",
        "Complexity": "O(1)"
      },
      {
        "Command": "CLUSTER_SPUBLISH",
        "Name": "CLUSTER|SPUBLISH",
        "Summary": "Processes a forwarded published message from a node in the same shard",
        "Group": "Cluster",
        "Complexity": "O(1)"
      },
      {
        "Command": "CLUSTER_FLUSHALL",
        "Name": "CLUSTER|FLUSHALL",
        "Summary": "Sent by primary to replica to force to FLUSH its database",
        "Group": "Cluster",
        "Complexity": "O(1)"
      }
    ]
  }
]