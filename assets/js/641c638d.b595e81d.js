"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3248],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}},88556:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"commands/cluster","title":"Cluster Commands","description":"CLUSTER ADDSLOTS","source":"@site/docs/commands/cluster.md","sourceDirName":"commands","slug":"/commands/cluster","permalink":"/garnet/docs/commands/cluster","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/commands/cluster.md","tags":[],"version":"current","frontMatter":{"id":"cluster","sidebar_label":"Cluster Commands","title":"Cluster Commands","slug":"cluster"},"sidebar":"garnetDocSidebar","previous":{"title":"Transactions","permalink":"/garnet/docs/commands/transactions"},"next":{"title":"ACL","permalink":"/garnet/docs/commands/acl"}}');var t=s(74848),l=s(28453);const r={id:"cluster",sidebar_label:"Cluster Commands",title:"Cluster Commands",slug:"cluster"},a="Cluster Commands",d={},o=[{value:"CLUSTER ADDSLOTS",id:"cluster-addslots",level:2},{value:"Syntax",id:"syntax",level:4},{value:"RESP Reply",id:"resp-reply",level:4},{value:"CLUSTER ADDSLOTSRANGE",id:"cluster-addslotsrange",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"RESP Reply",id:"resp-reply-1",level:4},{value:"CLUSTER BUMPEPOCH",id:"cluster-bumpepoch",level:2},{value:"Syntax",id:"syntax-2",level:4},{value:"RESP Reply",id:"resp-reply-2",level:4},{value:"CLUSTER BANLIST",id:"cluster-banlist",level:2},{value:"Syntax",id:"syntax-3",level:4},{value:"RESP Reply",id:"resp-reply-3",level:4},{value:"CLUSTER COUNTKEYSINSLOT",id:"cluster-countkeysinslot",level:2},{value:"Syntax",id:"syntax-4",level:4},{value:"RESP Reply",id:"resp-reply-4",level:4},{value:"CLUSTER DELKEYSINSLOT",id:"cluster-delkeysinslot",level:2},{value:"Syntax",id:"syntax-5",level:4},{value:"RESP Reply",id:"resp-reply-5",level:4},{value:"CLUSTER DELKEYSINSLOTRANGE",id:"cluster-delkeysinslotrange",level:2},{value:"Syntax",id:"syntax-6",level:4},{value:"RESP Reply",id:"resp-reply-6",level:4},{value:"CLUSTER DELSLOTS",id:"cluster-delslots",level:2},{value:"Syntax",id:"syntax-7",level:4},{value:"RESP Reply",id:"resp-reply-7",level:4},{value:"CLUSTER DELSLOTSRANGE",id:"cluster-delslotsrange",level:2},{value:"Syntax",id:"syntax-8",level:4},{value:"RESP Reply",id:"resp-reply-8",level:4},{value:"CLUSTER ENDPOINT",id:"cluster-endpoint",level:2},{value:"Syntax",id:"syntax-9",level:4},{value:"RESP Reply",id:"resp-reply-9",level:4},{value:"CLUSTER FAILOVER",id:"cluster-failover",level:2},{value:"Syntax",id:"syntax-10",level:4},{value:"RESP Reply",id:"resp-reply-10",level:4},{value:"CLUSTER FORGET",id:"cluster-forget",level:2},{value:"Syntax",id:"syntax-11",level:4},{value:"RESP Reply",id:"resp-reply-11",level:4},{value:"CLUSTER GETKEYSINSLOT",id:"cluster-getkeysinslot",level:2},{value:"Syntax",id:"syntax-12",level:4},{value:"RESP Reply",id:"resp-reply-12",level:4},{value:"CLUSTER INFO",id:"cluster-info",level:2},{value:"Syntax",id:"syntax-13",level:4},{value:"RESP Reply",id:"resp-reply-13",level:4},{value:"CLUSTER KEYSLOT",id:"cluster-keyslot",level:2},{value:"Syntax",id:"syntax-14",level:4},{value:"RESP Reply",id:"resp-reply-14",level:4},{value:"CLUSTER MEET",id:"cluster-meet",level:2},{value:"Syntax",id:"syntax-15",level:4},{value:"RESP Reply",id:"resp-reply-15",level:4},{value:"CLUSTER MYID",id:"cluster-myid",level:2},{value:"Syntax",id:"syntax-16",level:4},{value:"RESP Reply",id:"resp-reply-16",level:4},{value:"CLUSTER MYPARENTID",id:"cluster-myparentid",level:2},{value:"Syntax",id:"syntax-17",level:4},{value:"RESP Reply",id:"resp-reply-17",level:4},{value:"CLUSTER NODES",id:"cluster-nodes",level:2},{value:"Syntax",id:"syntax-18",level:4},{value:"RESP Reply",id:"resp-reply-18",level:4},{value:"CLUSTER REPLICAS",id:"cluster-replicas",level:2},{value:"Syntax",id:"syntax-19",level:4},{value:"RESP Reply",id:"resp-reply-19",level:4},{value:"CLUSTER REPLICATE",id:"cluster-replicate",level:2},{value:"Syntax",id:"syntax-20",level:4},{value:"RESP Reply",id:"resp-reply-20",level:4},{value:"CLUSTER SET-CONFIG-EPOCH",id:"cluster-set-config-epoch",level:2},{value:"Syntax",id:"syntax-21",level:4},{value:"RESP Reply",id:"resp-reply-21",level:4},{value:"CLUSTER SETSLOT",id:"cluster-setslot",level:2},{value:"Syntax",id:"syntax-22",level:4},{value:"MIGRATING",id:"migrating",level:4},{value:"IMPORTING",id:"importing",level:4},{value:"STABLE",id:"stable",level:5},{value:"NODE",id:"node",level:4},{value:"RESP Reply",id:"resp-reply-22",level:4},{value:"CLUSTER SETSLOTRANGE",id:"cluster-setslotrange",level:2},{value:"Syntax",id:"syntax-23",level:4},{value:"RESP Reply",id:"resp-reply-23",level:4},{value:"CLUSTER SHARDS",id:"cluster-shards",level:2},{value:"Syntax",id:"syntax-24",level:4},{value:"RESP Reply",id:"resp-reply-24",level:4},{value:"CLUSTER SLOTS",id:"cluster-slots",level:2},{value:"Syntax",id:"syntax-25",level:4},{value:"RESP Reply",id:"resp-reply-25",level:4},{value:"ASKING",id:"asking",level:2},{value:"Syntax",id:"syntax-26",level:4},{value:"RESP Reply",id:"resp-reply-26",level:4},{value:"READONLY",id:"readonly",level:2},{value:"Syntax",id:"syntax-27",level:4},{value:"RESP Reply",id:"resp-reply-27",level:4},{value:"READWRITE",id:"readwrite",level:2},{value:"Syntax",id:"syntax-28",level:4},{value:"RESP Reply",id:"resp-reply-28",level:4},{value:"RESET",id:"reset",level:2},{value:"Syntax",id:"syntax-29",level:4},{value:"RESP Reply",id:"resp-reply-29",level:4}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"cluster-commands",children:"Cluster Commands"})}),"\n",(0,t.jsx)(n.h2,{id:"cluster-addslots",children:"CLUSTER ADDSLOTS"}),"\n",(0,t.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER ADDSLOTS slot [slot ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is used to assign specific slots to a given node.\nThe node receiving the command will perform the following checks:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"A node will refuse to acquire ownership of a slot that is already assigned to another node, from its point of view."}),"\n",(0,t.jsx)(n.li,{children:"The command will fail if a node is specified multiple times."}),"\n",(0,t.jsx)(n.li,{children:"If the slot value specified is out of the designated range (0-16383), the command will return out of range error."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This command is used initially to setup a redis cluster or fix a broken cluster where slots ranges might be unassigned due to failures."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-addslotsrange",children:"CLUSTER ADDSLOTSRANGE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER ADDSLOTSRANGE start-slot end-slot [start-slot end-slot ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is similar to addslots and only differs in that it allows for specifying slot ranges assigned to the receiving node."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-1",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-bumpepoch",children:"CLUSTER BUMPEPOCH"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER BUMPEPOCH\n"})}),"\n",(0,t.jsx)(n.p,{children:"Advances the config epoch of the receiving node.\nThe config epoch is used internally to apply configuration changes across the cluster.\nMigration and failover operations automatically bump the configuration epoch when necessary.\nIt should be used with caution by the cluster orchestrator as needed to adjust cluster configuration."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-2",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-banlist",children:"CLUSTER BANLIST"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER BANLIST\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Return the list of nodes currently banned from being added to the cluster along with expiry time in seconds.\nThis command is used in combination with ",(0,t.jsx)(n.code,{children:"CLUSTER FORGET"})," to monitor which nodes are banned from being added in the cluster."]}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-3",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:'Returns array list of strings "nodeid : expiry" or empty array.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'127.0.0.1:7000> cluster banlist\n1) "ad9e5b8bde5ffb0cf7a3372fe0345f765186983f : 57"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-countkeysinslot",children:"CLUSTER COUNTKEYSINSLOT"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER COUNTKEYSINSLOT slot\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the number of existing keys hashing to the corresponding slot.\nThe command queries only the data of the receiving node.\nFor slots not owned by the receiving node, the result returned is always zero."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-4",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns integer value."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-delkeysinslot",children:"CLUSTER DELKEYSINSLOT"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER DELKEYSINSLOT slot [slot ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command asks the receiving node to delete all keys mapping to the provided nodes.\nThe cluster operator can use this command to cleanup any orphaned keys which are no longer served by the receiving node."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-5",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-delkeysinslotrange",children:"CLUSTER DELKEYSINSLOTRANGE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER DELKEYSINSLOTRANGE start-slot end-slot [start-slot end-slot ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is similar to delkeysinslot and only differs in that it allows for specifying slot ranges."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-6",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-delslots",children:"CLUSTER DELSLOTS"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER DELSLOTS slot [slot ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command asks the receiving node to forget which primary serves the corresponding slots.\nNote that this command will work only for the receiving node.\nForgeting slots will not propagate to other nodes.\nThe receiving node will not stop accepting gossip messages.\nIn that case, if a gossip message is received from a remote node containing assignment of these nodes, that\nnode will accept the assignment if the config epoch of the slot owner is greater than the local copy."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-7",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-delslotsrange",children:"CLUSTER DELSLOTSRANGE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER DELSLOTSRANGE start-slot end-slot [start-slot end-slot ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is similar to delslots and only differs in that it allows for specifying slot ranges to be forgotten at the the receiving node."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-8",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-endpoint",children:"CLUSTER ENDPOINT"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER ENDPOINT node-id\n"})}),"\n",(0,t.jsx)(n.p,{children:'This command returns the endpoint associated with the given node-id.\nIf the receiving node does not have any information about the provided node-id it will return "unassigned:0".'}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-9",children:"RESP Reply"}),"\n",(0,t.jsxs)(n.p,{children:['Bulk string of endpoint "address',":port",'" or "unassigned:0"']}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-failover",children:"CLUSTER FAILOVER"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER FAILOVER [FORCE | ABORT]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is sent to a replica to start a manual failover and take the role of its primary.\nIt can be called to safely swap the current primary to a replica node without any data loss, if the primary is reachable.\nWhen a replica receives the above command it executes the following steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Issue stop writes to primary. Behavior can be overriden using FORCE option."}),"\n",(0,t.jsx)(n.li,{children:"Primary replies with current replication offset after it has blocked any writes. Behavior can be overriden using FORCE option."}),"\n",(0,t.jsx)(n.li,{children:"Replica awaits for its local replication offset to match that of the primary. Behavior can be overriden using FORCE option."}),"\n",(0,t.jsx)(n.li,{children:"Replica takes over as new primary and bumps its local config epoch."}),"\n",(0,t.jsx)(n.li,{children:"New primary propagates configuration change through gossip."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The cluster operator can also use the ABORT option to abort an ongoing failover where appropriate."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-10",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any.\nThis does not mean that FAILOVER has succeeded, only that the failover background task has started."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-forget",children:"CLUSTER FORGET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER FORGET node-id [expiry-in-seconds]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is used to forget a node from the perspective of the receiving node.\nBecause other nodes in the cluster might know about the node that is being forgotten, it is possible that the forgotten node will be re-added through gossip.\nFor this reason, every forgotten node is associated with an expiry that prevents, that node to be re-added for the expiration period.\nThe cluster operator can provide a custom expiration period. The default value is 60 seconds.\nIn order to forget the node across the cluster, the operator has to issue forget to all nodes in the cluster individually.\nThe command will fail if any of the following occurs:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"A node cannot forget itself."}),"\n",(0,t.jsx)(n.li,{children:"An unknown node cannot be forgotten."}),"\n",(0,t.jsx)(n.li,{children:"The receiving node is a replica and the node to be forgotten is its primary."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-11",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-getkeysinslot",children:"CLUSTER GETKEYSINSLOT"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER GETKEYSINSLOT slot count\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command returns an array of existing keys that map to the corresponding slot.\nIt is used during manual re-sharding along with other related commands (i.e. countkeysinslot)."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-12",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"An array of keys or empty."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-info",children:"CLUSTER INFO"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER INFO\n"})}),"\n",(0,t.jsx)(n.p,{children:"CLUSTER INFO provides INFO style information about Redis Cluster vital parameters."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-13",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Bulk string reply: A map between named fields and values in the form of : lines separated by newlines composed by the two bytes CRLF."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-keyslot",children:"CLUSTER KEYSLOT"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER KEYSLOT <key>\n"})}),"\n",(0,t.jsx)(n.p,{children:"The command returns an integer value identifying the slot the corresponding key hashes to."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-14",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns integer value in range between 0 to 16383"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-meet",children:"CLUSTER MEET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER MEET address port\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is used to connect Garnet cluster instances to each other.\nBy default the nodes do not trust its other and only accept nodes that have been introduced through cluster meet or through gossip messages from another trusted node.\nThe cluster operator is supposed to connect nodes by issuing meet when setting up the cluster.\nHowever, as indicated above the meet issued does not need to be reciprocal."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-15",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-myid",children:"CLUSTER MYID"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER MYID\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command returns the unique node-id of the receiving node"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-16",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns a bulk string of the node-id"}),"\n",(0,t.jsx)(n.h2,{id:"cluster-myparentid",children:"CLUSTER MYPARENTID"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER MYPARENTID\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command returns the node-id of its parent-node (i.e. primary) if the node is a replica."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-17",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns a bulk string of the parent-node else it returns its own id."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-nodes",children:"CLUSTER NODES"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER NODES\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command returns the cluster configuration from the perspective of the receiving node.\nThe cluster operator should use this command to retrieve cluster information for administrative tasks, debugging and configuration inspections."}),"\n",(0,t.jsx)(n.p,{children:"The output of the command is space separated csv string which contains information about all known nodes in the cluster."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"PS C:\\Dev> redis-cli -p 7000\n127.0.0.1:7000> cluster nodes\ne39d271c7c4a4afca0e3d97154d2788502af12e3 192.168.1.26:7000@17000,test-host1 myself,master - 0 0 1 connected 0-5461\ne0a69e89458c078d61a7a38f8e5f191522dcb1a7 192.168.1.26:7001@17001,test-host2 master - 0 0 2 connected 5462-10922\n6fad21a7b28f1f2f05324257abf5e5e3b54e3286 192.168.1.26:7002@17002,test-host3 master - 0 0 3 connected 10923-16383\n93a06cbed623ab044f809e2c67f3c3607ec0cc43 192.168.1.26:7003@17003,test-host4 slave e0a69e89458c078d61a7a38f8e5f191522dcb1a7 0 0 7 connected\n03742a8ce43a911a81562e4947194bf54a8da2c6 192.168.1.26:7004@17004,test-host5 slave 6fad21a7b28f1f2f05324257abf5e5e3b54e3286 0 0 8 connected\ne5f1c7ec263e5b9133d88535572901af881ab644 192.168.1.26:7005@17005,test-host6 slave e39d271c7c4a4afca0e3d97154d2788502af12e3 0 0 9 connected\n127.0.0.1:7000>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Each line is contains the following fields:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"<id> <ip:port@cport[,hostname]> <flags> <master> <ping-sent> <pong-recv> <config-epoch> <link-state> <slot> <slot> ... <slot>\n"})}),"\n",(0,t.jsx)(n.p,{children:"To be compatible with the resp protocol, we emit the above information when responding to cluster nodes command.\nHowever, not all information is actively used or updated.\nFor each, we actively use in Garnet, we present a short description below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"id: The node-id, a 40-character globally unique string generated for each node at start-up."}),"\n",(0,t.jsxs)(n.li,{children:["ip",":port","@cport: The node's endpoint that clients should connect to issue queries. The second port is not being used actively by the Garnet instances nor it is open for communication."]}),"\n",(0,t.jsx)(n.li,{children:"hostname: A human readable string that is always available automatically from the system. It is not configurable at this point."}),"\n",(0,t.jsx)(n.li,{children:"flags: Comma separated flags myself,master,slave"}),"\n",(0,t.jsx)(n.li,{children:"master: If the node is a replica and the primary is known, this would be the node-id of the master otherwise -"}),"\n",(0,t.jsx)(n.li,{children:"ping-sent: N/A"}),"\n",(0,t.jsx)(n.li,{children:"pong-recv: N/A"}),"\n",(0,t.jsx)(n.li,{children:"config-epoch: local configuration epoch for receiving node"}),"\n",(0,t.jsx)(n.li,{children:"slot: slots served by associated node. If node is a replica, it implicitly serves reads for that slot"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note: Unfortunately for this command, the word slave is part of the protocol and cannot be removed, until that part of the API becomes deprecated."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-18",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns a bulk string of serialized cluster configuration."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-replicas",children:"CLUSTER REPLICAS"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER REPLICAS node-id\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command returns an array of nodes, replicating the primary specified by the provided node-id.\nThe returned information use the same format as in cluster nodes."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-19",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Array list of nodes replicating the corresponding node."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-replicate",children:"CLUSTER REPLICATE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER REPLICATE node-id\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command configures the receiving node to replicate the primary indicated by the corresponding node-id.\nOnce the command succeeds, the rest of the nodes will be informed about the configuration change through gossip."}),"\n",(0,t.jsx)(n.p,{children:"A node that receives the above command will accept it assuming the following conditions are met:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Receiving node is a primary"}),"\n",(0,t.jsx)(n.li,{children:"Provided node-id refers to a known primary."}),"\n",(0,t.jsx)(n.li,{children:"Provided node-id differs from the node-id of the receiving node."}),"\n",(0,t.jsx)(n.li,{children:"The receiving node does not serve any slots."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Upon receipt of the command, the instance will immediately try to attach to the primary and retrieve the latest primary checkpoint.\nAfter receiving it, it will initiate aof sync from primary and start responding to read requests.\nThe request to replicate is executed async, so the response to the client will be immediate.\nThis does not mean replica has attached succesfully, only that replicate request was initiated succesfully."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-20",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-set-config-epoch",children:"CLUSTER SET-CONFIG-EPOCH"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER SET-CONFIG-EPOCH config-epoch\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command sets a specific config epoch in a fresh node. It will succeed only if:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The nodes table is empty"}),"\n",(0,t.jsx)(n.li,{children:"The config epoch of the receiving node is zero."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This command is usually called when setting up a new cluster."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-21",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-setslot",children:"CLUSTER SETSLOT"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-22",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER SETSLOT slot <IMPORTING source-node-id | MIGRATING target-node-id | NODE node-id | STABLE>\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is used to alter the state of a slot in the receiving node during migration.\nThe cluster operator can use this command in combination with MIGRATE, COUNTKEYSINSLOT, and GETKEYSINSLOT to transfer slot ownership between nodes in the cluster."}),"\n",(0,t.jsx)(n.p,{children:"The following options are available:"}),"\n",(0,t.jsx)(n.h4,{id:"migrating",children:"MIGRATING"}),"\n",(0,t.jsx)(n.p,{children:"The slot state is set to MIGRATING, if and only if"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"the receiving node is the primary owner of the slot"}),"\n",(0,t.jsx)(n.li,{children:"the slot is not already in migrating state"}),"\n",(0,t.jsx)(n.li,{children:"the specifief node-id is known and it corresponds to a primary node."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Due to the aforementioned conditions, slots can transition to MIGRATING state only at the source node.\nTherefore, any queries on keys associated to a slot that is in MIGRATING state, will be processed at the source node as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Read commands are processed as usual if key exists otherwise they are redirected to target node using ",(0,t.jsx)(n.em,{children:"-MOVED"})," response."]}),"\n",(0,t.jsxs)(n.li,{children:["Write requests for existing keys are declined using ",(0,t.jsx)(n.em,{children:"-MIGRATING"})," response otherwise they are redirected to the target node using ",(0,t.jsx)(n.em,{children:"-ASK"})," response."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"}),"\nThis state change is transient so it will not be propagated through gossip to rest of cluster nodes.\nHowever, ",(0,t.jsx)(n.em,{children:"-MOVED"})," redirection will still be emitted pointing to the source node of the slot."]}),"\n",(0,t.jsx)(n.h4,{id:"importing",children:"IMPORTING"}),"\n",(0,t.jsx)(n.p,{children:"The slot state is set to IMPORTING, if and only if"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The receiving node is a primary that does not already own the slot."}),"\n",(0,t.jsx)(n.li,{children:"The corresponding source-node-id is a known primary node that owns the slot."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Any queries referring to keys related to the importing slot are processed only if precedeed by ASKING, otherwise all requests emit ",(0,t.jsx)(n.em,{children:"-MOVED"})," response."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"}),"\nThis state change is transient so it will not be propagated through gossip to rest of cluster nodes.\nHowever, ",(0,t.jsx)(n.em,{children:"-MOVED"})," redirection will still be emitted pointing to the source node of the slot."]}),"\n",(0,t.jsx)(n.h5,{id:"stable",children:"STABLE"}),"\n",(0,t.jsx)(n.p,{children:"This option is used to clear MIGRATING or IMPORTING state.\nIt is used mainly to fix the cluster that has stuck in a bad state due to possible failures."}),"\n",(0,t.jsx)(n.h4,{id:"node",children:"NODE"}),"\n",(0,t.jsx)(n.p,{children:"This option is used to transition ownership of the migrating slot to the target node."}),"\n",(0,t.jsx)(n.p,{children:"If the node receiving the command is in importing state (i.e. the target node), it will set itself at the owner of the node and bump config epoch.\nIf the node receiving the comamdn is in migrating state (i.e. the source node), it will assign ownernship of the node to the target node but will not bump the epoch."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE"})," For more info about the command checkout the key migration page."]}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-22",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-setslotrange",children:"CLUSTER SETSLOTRANGE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-23",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER SETSLOTRANGE <IMPORTING source-node-id | MIGRATING target-node-id | NODE node-id | STABLE> slot-start slot-end [slot-start slot-end ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command is similar to setslot and only differs in that it allows for specifying slot ranges."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-23",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Returns +OK on success, otherwise --ERR message if any."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-shards",children:"CLUSTER SHARDS"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-24",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER SETSLOTRANGE <IMPORTING source-node-id | MIGRATING target-node-id | NODE node-id | STABLE> slot-start slot-end [slot-start slot-end ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This commands returns details about the shards in the cluster.\nShards have a single primary node and multiple replicas serving a specific range of slots.\nThe information returned are generated from the local configuration view of the receiving node."}),"\n",(0,t.jsx)(n.p,{children:"An example of the command output is shown below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'PS C:\\Dev> redis-cli -p 7001\n127.0.0.1:7001> cluster shards\n1) 1) "slots"\n   2) 1) (integer) 5462\n      2) (integer) 10922\n   3) "nodes"\n   4) 1)  1) "id"\n          2) "e0f69d9f8d4d2b2fa100d1dd1fbd7bc2cf4e9396"\n          3) "port"\n          4) (integer) 7001\n          5) "address"\n          6) "10.159.2.73"\n          7) "role"\n          8) "PRIMARY"\n          9) "replication-offset"\n         10) (integer) 64\n         11) "health"\n         12) "online"\n      2)  1) "id"\n          2) "4e79261982fe0162262da2f912f6dd4bc9161099"\n          3) "port"\n          4) (integer) 7003\n          5) "address"\n          6) "10.159.2.73"\n          7) "role"\n          8) "REPLICA"\n          9) "replication-offset"\n         10) (integer) 0\n         11) "health"\n         12) "online"\n2) 1) "slots"\n   2) 1) (integer) 0\n      2) (integer) 5461\n   3) "nodes"\n   4) 1)  1) "id"\n          2) "228133c63d1151f784c9404241c8b06afbc83117"\n          3) "port"\n          4) (integer) 7000\n          5) "address"\n          6) "10.159.2.73"\n          7) "role"\n          8) "PRIMARY"\n          9) "replication-offset"\n         10) (integer) 0\n         11) "health"\n         12) "online"\n      2)  1) "id"\n          2) "96cd8f6d4b57cea02deb9147cdcfac79a4641d0c"\n          3) "port"\n          4) (integer) 7005\n          5) "address"\n          6) "10.159.2.73"\n          7) "role"\n          8) "REPLICA"\n          9) "replication-offset"\n         10) (integer) 0\n         11) "health"\n         12) "online"\n3) 1) "slots"\n   2) 1) (integer) 10923\n      2) (integer) 16383\n   3) "nodes"\n   4) 1)  1) "id"\n          2) "810544afb338b6b217a6e169b0115d70337bf557"\n          3) "port"\n          4) (integer) 7002\n          5) "address"\n          6) "10.159.2.73"\n          7) "role"\n          8) "PRIMARY"\n          9) "replication-offset"\n         10) (integer) 0\n         11) "health"\n         12) "online"\n      2)  1) "id"\n          2) "2035250845f809ab23a2f4c51e73b1c4541c0092"\n          3) "port"\n          4) (integer) 7004\n          5) "address"\n          6) "10.159.2.73"\n          7) "role"\n          8) "REPLICA"\n          9) "replication-offset"\n         10) (integer) 0\n         11) "health"\n         12) "online"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-24",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Array reply: a nested list of hash ranges and node information grouped by shard."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cluster-slots",children:"CLUSTER SLOTS"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-25",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tCLUSTER SLOTS\n"})}),"\n",(0,t.jsx)(n.p,{children:"CLUSTER SLOTS returns details about which cluster slots map to which Redis instances."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-25",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Array reply: nested list of slot ranges with networking information."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"asking",children:"ASKING"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-26",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tASKING\n"})}),"\n",(0,t.jsx)(n.p,{children:"When a cluster client receives an -ASK redirect, the ASKING command is sent to the target node followed by the command which was redirected. This is normally done automatically by cluster clients."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-26",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"readonly",children:"READONLY"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-27",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tREADONLY\n"})}),"\n",(0,t.jsx)(n.p,{children:"Enables read queries for a connection to a Redis Cluster replica node."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-27",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"readwrite",children:"READWRITE"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-28",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tREADWRITE\n"})}),"\n",(0,t.jsx)(n.p,{children:"Disables read queries for a connection to a Redis Cluster replica node."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-28",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"reset",children:"RESET"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-29",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\tRESET\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command performs a full reset of the connection's server-side context, mimicking the effect of disconnecting and reconnecting again."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-29",children:"RESP Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: RESET."}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);