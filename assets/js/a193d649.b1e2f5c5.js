"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[5014],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},93922:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"commands/data-structures","title":"Data Structures","description":"Hash","source":"@site/docs/commands/data-structures.md","sourceDirName":"commands","slug":"/commands/data-structures","permalink":"/garnet/docs/commands/data-structures","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/commands/data-structures.md","tags":[],"version":"current","frontMatter":{"id":"data-structures","sidebar_label":"Data Structures","title":"Data Structures"},"sidebar":"garnetDocSidebar","previous":{"title":"Analytics","permalink":"/garnet/docs/commands/analytics"},"next":{"title":"Server Management","permalink":"/garnet/docs/commands/server"}}');var i=s(74848),r=s(28453);const l={id:"data-structures",sidebar_label:"Data Structures",title:"Data Structures"},a="Data Structures",h={},d=[{value:"Hash",id:"hash",level:2},{value:"HDEL",id:"hdel",level:3},{value:"Syntax",id:"syntax",level:4},{value:"HEXISTS",id:"hexists",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"HGET",id:"hget",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"HGETALL",id:"hgetall",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"HINCRBY",id:"hincrby",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"HINCRBYFLOAT",id:"hincrbyfloat",level:3},{value:"Syntax",id:"syntax-5",level:4},{value:"HKEYS",id:"hkeys",level:3},{value:"Syntax",id:"syntax-6",level:4},{value:"HLEN",id:"hlen",level:3},{value:"Syntax",id:"syntax-7",level:4},{value:"HMGET",id:"hmget",level:3},{value:"Syntax",id:"syntax-8",level:4},{value:"HMSET",id:"hmset",level:3},{value:"Syntax",id:"syntax-9",level:4},{value:"HRANDFIELD",id:"hrandfield",level:3},{value:"Syntax",id:"syntax-10",level:4},{value:"HSCAN",id:"hscan",level:3},{value:"Syntax",id:"syntax-11",level:4},{value:"HSET",id:"hset",level:3},{value:"Syntax",id:"syntax-12",level:4},{value:"HSETNX",id:"hsetnx",level:3},{value:"Syntax",id:"syntax-13",level:4},{value:"HSTRLEN",id:"hstrlen",level:3},{value:"Syntax",id:"syntax-14",level:4},{value:"HVALS",id:"hvals",level:3},{value:"Syntax",id:"syntax-15",level:4},{value:"HEXPIRE",id:"hexpire",level:3},{value:"Syntax",id:"syntax-16",level:4},{value:"Resp Reply",id:"resp-reply",level:4},{value:"HEXPIREAT",id:"hexpireat",level:3},{value:"Syntax",id:"syntax-17",level:4},{value:"Resp Reply",id:"resp-reply-1",level:4},{value:"HPEXPIRE",id:"hpexpire",level:3},{value:"Syntax",id:"syntax-18",level:4},{value:"Resp Reply",id:"resp-reply-2",level:4},{value:"HPEXPIREAT",id:"hpexpireat",level:3},{value:"Syntax",id:"syntax-19",level:4},{value:"Resp Reply",id:"resp-reply-3",level:4},{value:"HTTL",id:"httl",level:3},{value:"Syntax",id:"syntax-20",level:4},{value:"Resp Reply",id:"resp-reply-4",level:4},{value:"HPTTL",id:"hpttl",level:3},{value:"Syntax",id:"syntax-21",level:4},{value:"Resp Reply",id:"resp-reply-5",level:4},{value:"HEXPIRETIME",id:"hexpiretime",level:3},{value:"Syntax",id:"syntax-22",level:4},{value:"Resp Reply",id:"resp-reply-6",level:4},{value:"HPEXPIRETIME",id:"hpexpiretime",level:3},{value:"Syntax",id:"syntax-23",level:4},{value:"Resp Reply",id:"resp-reply-7",level:4},{value:"HPERSIST",id:"hpersist",level:3},{value:"Syntax",id:"syntax-24",level:4},{value:"Resp Reply",id:"resp-reply-8",level:4},{value:"HCOLLECT",id:"hcollect",level:3},{value:"Syntax",id:"syntax-25",level:4},{value:"Resp Reply",id:"resp-reply-9",level:4},{value:"List",id:"list",level:2},{value:"BLMOVE",id:"blmove",level:3},{value:"Syntax",id:"syntax-26",level:4},{value:"BRPOPLPUSH",id:"brpoplpush",level:3},{value:"Syntax",id:"syntax-27",level:4},{value:"Resp Reply",id:"resp-reply-10",level:4},{value:"BLMPOP",id:"blmpop",level:3},{value:"Syntax",id:"syntax-28",level:4},{value:"BLPOP",id:"blpop",level:3},{value:"Syntax",id:"syntax-29",level:4},{value:"BRPOP",id:"brpop",level:3},{value:"Syntax",id:"syntax-30",level:4},{value:"LINDEX",id:"lindex",level:3},{value:"Syntax",id:"syntax-31",level:4},{value:"LINSERT",id:"linsert",level:3},{value:"Syntax",id:"syntax-32",level:4},{value:"LLEN",id:"llen",level:3},{value:"Syntax",id:"syntax-33",level:4},{value:"LMOVE",id:"lmove",level:3},{value:"Syntax",id:"syntax-34",level:4},{value:"LMPOP",id:"lmpop",level:3},{value:"Syntax",id:"syntax-35",level:4},{value:"LPOP",id:"lpop",level:3},{value:"Syntax",id:"syntax-36",level:4},{value:"LPOS",id:"lpos",level:3},{value:"Syntax",id:"syntax-37",level:4},{value:"Resp Reply",id:"resp-reply-11",level:4},{value:"LPUSH",id:"lpush",level:3},{value:"Syntax",id:"syntax-38",level:4},{value:"LPUSHX",id:"lpushx",level:3},{value:"Syntax",id:"syntax-39",level:4},{value:"LRANGE",id:"lrange",level:3},{value:"Syntax",id:"syntax-40",level:4},{value:"LREM",id:"lrem",level:3},{value:"Syntax",id:"syntax-41",level:4},{value:"LSET",id:"lset",level:3},{value:"Syntax",id:"syntax-42",level:4},{value:"LTRIM",id:"ltrim",level:3},{value:"Syntax",id:"syntax-43",level:4},{value:"RPOP",id:"rpop",level:3},{value:"Syntax",id:"syntax-44",level:4},{value:"RPOPLPUSH",id:"rpoplpush",level:3},{value:"Syntax",id:"syntax-45",level:4},{value:"RPUSH",id:"rpush",level:3},{value:"Syntax",id:"syntax-46",level:4},{value:"RPUSHX",id:"rpushx",level:3},{value:"Syntax",id:"syntax-47",level:4},{value:"Set",id:"set",level:2},{value:"SADD",id:"sadd",level:3},{value:"Syntax",id:"syntax-48",level:4},{value:"SCARD",id:"scard",level:3},{value:"Syntax",id:"syntax-49",level:4},{value:"SMEMBERS",id:"smembers",level:3},{value:"Syntax",id:"syntax-50",level:4},{value:"SMOVE",id:"smove",level:3},{value:"Syntax",id:"syntax-51",level:4},{value:"SPOP",id:"spop",level:3},{value:"Syntax",id:"syntax-52",level:4},{value:"SISMEMBER",id:"sismember",level:3},{value:"Syntax",id:"syntax-53",level:4},{value:"SMISMEMBER",id:"smismember",level:3},{value:"Syntax",id:"syntax-54",level:4},{value:"Resp Reply",id:"resp-reply-12",level:4},{value:"SRANDMEMBER",id:"srandmember",level:3},{value:"Syntax",id:"syntax-55",level:4},{value:"SREM",id:"srem",level:3},{value:"Syntax",id:"syntax-56",level:4},{value:"SSCAN",id:"sscan",level:3},{value:"Syntax",id:"syntax-57",level:4},{value:"SUNION",id:"sunion",level:3},{value:"Syntax",id:"syntax-58",level:4},{value:"SUNIONSTORE",id:"sunionstore",level:3},{value:"Syntax",id:"syntax-59",level:4},{value:"SINTER",id:"sinter",level:3},{value:"Syntax",id:"syntax-60",level:4},{value:"SINTERSTORE",id:"sinterstore",level:3},{value:"Syntax",id:"syntax-61",level:4},{value:"SINTERCARD",id:"sintercard",level:3},{value:"Syntax",id:"syntax-62",level:4},{value:"SDIFF",id:"sdiff",level:3},{value:"Syntax",id:"syntax-63",level:4},{value:"SDIFFSTORE",id:"sdiffstore",level:3},{value:"Syntax",id:"syntax-64",level:4},{value:"Sorted Set",id:"sorted-set",level:2},{value:"ZADD",id:"zadd",level:3},{value:"Syntax",id:"syntax-65",level:4},{value:"ZCARD",id:"zcard",level:3},{value:"Syntax",id:"syntax-66",level:4},{value:"ZCOUNT",id:"zcount",level:3},{value:"Syntax",id:"syntax-67",level:4},{value:"ZDIFF",id:"zdiff",level:3},{value:"Syntax",id:"syntax-68",level:4},{value:"ZDIFFSTORE",id:"zdiffstore",level:3},{value:"Syntax",id:"syntax-69",level:4},{value:"Resp Reply",id:"resp-reply-13",level:4},{value:"ZINCRBY",id:"zincrby",level:3},{value:"Syntax",id:"syntax-70",level:4},{value:"ZINTER",id:"zinter",level:3},{value:"Syntax",id:"syntax-71",level:4},{value:"ZINTERCARD",id:"zintercard",level:3},{value:"Syntax",id:"syntax-72",level:4},{value:"ZINTERSTORE",id:"zinterstore",level:3},{value:"Syntax",id:"syntax-73",level:4},{value:"ZLEXCOUNT",id:"zlexcount",level:3},{value:"Syntax",id:"syntax-74",level:4},{value:"ZMSCORE",id:"zmscore",level:3},{value:"Syntax",id:"syntax-75",level:4},{value:"BZMPOP",id:"bzmpop",level:3},{value:"Syntax",id:"syntax-76",level:4},{value:"Resp Reply",id:"resp-reply-14",level:4},{value:"BZPOPMAX",id:"bzpopmax",level:3},{value:"Syntax",id:"syntax-77",level:4},{value:"Resp Reply",id:"resp-reply-15",level:4},{value:"BZPOPMIN",id:"bzpopmin",level:3},{value:"Syntax",id:"syntax-78",level:4},{value:"Resp Reply",id:"resp-reply-16",level:4},{value:"ZMPOP",id:"zmpop",level:3},{value:"Syntax",id:"syntax-79",level:4},{value:"ZPOPMAX",id:"zpopmax",level:3},{value:"Syntax",id:"syntax-80",level:4},{value:"ZPOPMIN",id:"zpopmin",level:3},{value:"Syntax",id:"syntax-81",level:4},{value:"ZRANDMEMBER",id:"zrandmember",level:3},{value:"Syntax",id:"syntax-82",level:4},{value:"ZRANGE",id:"zrange",level:3},{value:"Syntax",id:"syntax-83",level:4},{value:"ZRANGEBYLEX",id:"zrangebylex",level:3},{value:"Syntax",id:"syntax-84",level:4},{value:"ZRANGEBYSCORE",id:"zrangebyscore",level:3},{value:"Syntax",id:"syntax-85",level:4},{value:"ZRANK",id:"zrank",level:3},{value:"Syntax",id:"syntax-86",level:4},{value:"ZREM",id:"zrem",level:3},{value:"Syntax",id:"syntax-87",level:4},{value:"ZREMRANGEBYLEX",id:"zremrangebylex",level:3},{value:"Syntax",id:"syntax-88",level:4},{value:"ZREVRANGEBYLEX",id:"zrevrangebylex",level:3},{value:"Syntax",id:"syntax-89",level:4},{value:"Resp Reply",id:"resp-reply-17",level:4},{value:"ZREMRANGEBYSCORE",id:"zremrangebyscore",level:3},{value:"Syntax",id:"syntax-90",level:4},{value:"ZREMRANGEBYRANK",id:"zremrangebyrank",level:3},{value:"Syntax",id:"syntax-91",level:4},{value:"ZREMRANGEBYSCORE",id:"zremrangebyscore-1",level:3},{value:"Syntax",id:"syntax-92",level:4},{value:"ZREVRANGE",id:"zrevrange",level:3},{value:"Syntax",id:"syntax-93",level:4},{value:"ZREVRANGEBYSCORE",id:"zrevrangebyscore",level:3},{value:"Syntax",id:"syntax-94",level:4},{value:"ZREVRANK",id:"zrevrank",level:3},{value:"Syntax",id:"syntax-95",level:4},{value:"ZSCAN",id:"zscan",level:3},{value:"Syntax",id:"syntax-96",level:4},{value:"ZSCORE",id:"zscore",level:3},{value:"Syntax",id:"syntax-97",level:4},{value:"ZRANGESTORE",id:"zrangestore",level:3},{value:"Syntax",id:"syntax-98",level:4},{value:"ZUNION",id:"zunion",level:3},{value:"Syntax",id:"syntax-99",level:4},{value:"Resp Reply",id:"resp-reply-18",level:4},{value:"ZUNIONSTORE",id:"zunionstore",level:3},{value:"Syntax",id:"syntax-100",level:4},{value:"Resp Reply",id:"resp-reply-19",level:4},{value:"ZEXPIRE",id:"zexpire",level:3},{value:"Syntax",id:"syntax-101",level:4},{value:"Resp Reply",id:"resp-reply-20",level:4},{value:"ZEXPIREAT",id:"zexpireat",level:3},{value:"Syntax",id:"syntax-102",level:4},{value:"Resp Reply",id:"resp-reply-21",level:4},{value:"ZPEXPIRE",id:"zpexpire",level:3},{value:"Syntax",id:"syntax-103",level:4},{value:"Resp Reply",id:"resp-reply-22",level:4},{value:"ZPEXPIREAT",id:"zpexpireat",level:3},{value:"Syntax",id:"syntax-104",level:4},{value:"Resp Reply",id:"resp-reply-23",level:4},{value:"ZTTL",id:"zttl",level:3},{value:"Syntax",id:"syntax-105",level:4},{value:"Resp Reply",id:"resp-reply-24",level:4},{value:"ZPTTL",id:"zpttl",level:3},{value:"Syntax",id:"syntax-106",level:4},{value:"Resp Reply",id:"resp-reply-25",level:4},{value:"ZEXPIRETIME",id:"zexpiretime",level:3},{value:"Syntax",id:"syntax-107",level:4},{value:"Resp Reply",id:"resp-reply-26",level:4},{value:"ZPEXPIRETIME",id:"zpexpiretime",level:3},{value:"Syntax",id:"syntax-108",level:4},{value:"Resp Reply",id:"resp-reply-27",level:4},{value:"ZPERSIST",id:"zpersist",level:3},{value:"Syntax",id:"syntax-109",level:4},{value:"Resp Reply",id:"resp-reply-28",level:4},{value:"ZCOLLECT",id:"zcollect",level:3},{value:"Syntax",id:"syntax-110",level:4},{value:"Resp Reply",id:"resp-reply-29",level:4},{value:"Geospatial indices",id:"geospatial-indices",level:2},{value:"GEOADD",id:"geoadd",level:3},{value:"Syntax",id:"syntax-111",level:4},{value:"GEODIST",id:"geodist",level:3},{value:"Syntax",id:"syntax-112",level:4},{value:"GEOHASH",id:"geohash",level:3},{value:"Syntax",id:"syntax-113",level:4},{value:"GEOPOS",id:"geopos",level:3},{value:"Syntax",id:"syntax-114",level:4},{value:"GEORADIUS",id:"georadius",level:3},{value:"Syntax",id:"syntax-115",level:4},{value:"GEORADIUS_RO",id:"georadius_ro",level:3},{value:"Syntax",id:"syntax-116",level:4},{value:"GEORADIUSBYMEMBER",id:"georadiusbymember",level:3},{value:"Syntax",id:"syntax-117",level:4},{value:"GEORADIUSBYMEMBER_RO",id:"georadiusbymember_ro",level:3},{value:"Syntax",id:"syntax-118",level:4},{value:"GEOSEARCH",id:"geosearch",level:3},{value:"Syntax",id:"syntax-119",level:4},{value:"GEOSEARCHSTORE",id:"geosearchstore",level:3},{value:"Syntax",id:"syntax-120",level:4}];function o(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data-structures",children:"Data Structures"})}),"\n",(0,i.jsx)(n.h2,{id:"hash",children:"Hash"}),"\n",(0,i.jsx)(n.h3,{id:"hdel",children:"HDEL"}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HDEL key field [field ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes the specified fields from the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". Specified fields that do not exist within this hash are ignored. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, it is treated as an empty hash and this command returns 0."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hexists",children:"HEXISTS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HEXISTS key field\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns if field is an existing field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hget",children:"HGET"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HGET key field\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the value associated with field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hgetall",children:"HGETALL"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HGETALL key\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns all fields and values of the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hincrby",children:"HINCRBY"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HINCRBY key field increment\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Increments the number stored at field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"})," by increment.\r\nIf ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created. If field does not exist the value is set to 0 before the operation is performed.\r\nThe range of values supported by HINCRBY is limited to 64 bit signed integers."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hincrbyfloat",children:"HINCRBYFLOAT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HINCRBYFLOAT key field increment\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Increment the specified field of a hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),", and representing a floating point number, by the specified increment. If the increment value is negative, the result is to have the hash field value decremented instead of incremented. If the field does not exist, it is set to 0 before performing the operation. An error is returned if one of the following conditions occur:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The field contains a value of the wrong type (not a string)."}),"\n",(0,i.jsx)(n.li,{children:"The current field content or the specified increment are not parsable as a double precision floating point number."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hkeys",children:"HKEYS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-6",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HKEYS key\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns all field names in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hlen",children:"HLEN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-7",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HLEN key\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the number of fields contained in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hmget",children:"HMGET"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-8",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HMGET key field [field ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Ret\r\nurns the values associated with the specified fields in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For every field that does not exist in the hash, a nil value is returned. Because non-existing keys are treated as empty hashes, running HMGET against a non-existing ",(0,i.jsx)(n.strong,{children:"key"})," will return a list of nil values."]}),"\n",(0,i.jsx)(n.h3,{id:"hmset",children:"HMSET"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-9",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HMSET key field value [field value ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Deprecated in favor of HSET with multiple field-value pairs."}),"\n",(0,i.jsxs)(n.p,{children:["Sets the specified fields to their respective values in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". This command overwrites any specified fields already existing in the hash. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hrandfield",children:"HRANDFIELD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-10",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HRANDFIELD key [count [WITHVALUES]]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When called with just the ",(0,i.jsx)(n.strong,{children:"key"})," argument, return a random field from the hash value stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the provided count argument is positive, return an array of distinct fields. The array's length is either count or the hash's number of fields (",(0,i.jsx)(n.a,{href:"#hlen",children:"HLEN"}),"), whichever is lower."]}),"\n",(0,i.jsx)(n.p,{children:"If called with a negative count, the behavior changes and the command is allowed to return the same field multiple times. In this case, the number of returned fields is the absolute value of the specified count."}),"\n",(0,i.jsx)(n.p,{children:"The optional WITHVALUES modifier changes the reply so it includes the respective values of the randomly selected hash fields."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hscan",children:"HSCAN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-11",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HSCAN key cursor [MATCH pattern] [COUNT count] [NOVALUES]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Iterates over the fields and values of a hash stored at a given ",(0,i.jsx)(n.strong,{children:"key"}),". Same as ",(0,i.jsx)(n.a,{href:"#sscan",children:"SSCAN"})," and ",(0,i.jsx)(n.a,{href:"#zscan",children:"ZSCAN"})," commands, ",(0,i.jsx)(n.strong,{children:"HSCAN"})," is used in order to incrementally iterate over the elements of the hash set*."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"match"})," parameter allows to apply a filter to elements after they have been retrieved from the collection. The ",(0,i.jsx)(n.strong,{children:"count"})," option sets a limit to the maximum number of items returned from the server to this command. This limit is also set in conjunction with the object-scan-count-limit of the global server settings."]}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.strong,{children:"NOVALUES"})," option to make Redis return only the keys in the hash table without their corresponding values"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hset",children:"HSET"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-12",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HSET key field value\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Sets the specified fields to their respective values in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". This command overwrites the values of specified fields that exist in the hash. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hsetnx",children:"HSETNX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-13",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HSETNX key field value\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Sets field in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"})," to value, only if field does not yet exist. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new ",(0,i.jsx)(n.strong,{children:"key"})," holding a hash is created. If field already exists, this operation has no effect."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hstrlen",children:"HSTRLEN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-14",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HSTRLEN key field\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the string length of the value associated with ",(0,i.jsx)(n.strong,{children:"field"})," in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),". If the ",(0,i.jsx)(n.strong,{children:"key"})," or the ",(0,i.jsx)(n.strong,{children:"field"})," do not exist, 0 is returned."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hvals",children:"HVALS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-15",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HVALS key \n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns all values in the hash stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hexpire",children:"HEXPIRE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-16",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HEXPIRE key seconds [NX | XX | GT | LT] FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Sets a timeout on one or more fields of a hash key. After the timeout has expired, the fields will automatically be deleted. The timeout is specified in seconds."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on fields that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on fields that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the field doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hexpireat",children:"HEXPIREAT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-17",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HEXPIREAT key unix-time-seconds [NX | XX | GT | LT] FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Sets an absolute expiration time (Unix timestamp in seconds) for one or more hash fields. After the timestamp has passed, the fields will automatically be deleted."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on fields that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on fields that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-1",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the field doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hpexpire",children:"HPEXPIRE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-18",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HPEXPIRE key milliseconds [NX | XX | GT | LT] FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HEXPIRE but the timeout is specified in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on fields that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on fields that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-2",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the field doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hpexpireat",children:"HPEXPIREAT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-19",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HPEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT] FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HEXPIREAT but uses Unix timestamp in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on fields that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on fields that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-3",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the field doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"httl",children:"HTTL"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-20",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HTTL key FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the remaining time to live in seconds for one or more hash fields that have a timeout set."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-4",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TTL in seconds if the field exists and has an expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the field exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the field does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hpttl",children:"HPTTL"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-21",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HPTTL key FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HTTL but returns the remaining time to live in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-5",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TTL in milliseconds if the field exists and has an expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the field exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the field does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hexpiretime",children:"HEXPIRETIME"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-22",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HEXPIRETIME key FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the absolute Unix timestamp (in seconds) at which the specified hash fields will expire."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-6",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unix timestamp in seconds when the field will expire"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the field exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the field does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hpexpiretime",children:"HPEXPIRETIME"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-23",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HPEXPIRETIME key FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HEXPIRETIME but returns the expiry timestamp in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-7",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unix timestamp in milliseconds when the field will expire"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the field exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the field does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hpersist",children:"HPERSIST"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-24",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HPERSIST key FIELDS numfields field [field ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Removes the expiration from the specified hash fields, making them persistent."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-8",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each field, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was removed"}),"\n",(0,i.jsx)(n.li,{children:"0 if the field exists but has no timeout"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the field does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"hcollect",children:"HCOLLECT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-25",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    HCOLLECT key [key ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Manualy trigger cleanup of expired field from memory for a given Hash set key."}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"*"})," as the key to collect it from all hash keys."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-9",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Simple reply: OK response\r\nError reply: ERR HCOLLECT scan already in progress"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,i.jsx)(n.h3,{id:"blmove",children:"BLMOVE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-26",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BLMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT> timeout\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BLMOVE is the blocking variant of ",(0,i.jsx)(n.a,{href:"#lmove-lmove",children:"LMOVE"}),". When source contains elements, this command behaves exactly like LMOVE. When used inside a MULTI/EXEC block, this command behaves exactly like LMOVE. When source is empty, Garnet will block the connection until another client pushes to it or until timeout (a double value specifying the maximum number of seconds to block) is reached. A timeout of zero can be used to block indefinitely."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"brpoplpush",children:"BRPOPLPUSH"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-27",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"BRPOPLPUSH source destination timeout\n"})}),"\n",(0,i.jsx)(n.p,{children:"The BRPOPLPUSH command removes the last element from the list stored at source, and pushes the element to the list stored at destination. It then returns the element to the caller."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-10",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Bulk string reply: the element being popped and pushed."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"blmpop",children:"BLMPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-28",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BLMPOP timeout numkeys key [key ...] <LEFT | RIGHT> [COUNT count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BLMPOP is the blocking variant of ",(0,i.jsx)(n.a,{href:"#lmpop",children:"LMPOP"}),". When any of the lists contains elements, this command behaves exactly like LMPOP. When used inside a MULTI/EXEC block, this command behaves exactly like LMPOP. When all lists are empty, Garnet will block the connection until another client pushes to it or until timeout (a double value specifying the maximum number of seconds to block) is reached. A timeout of zero can be used to block indefinitely."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"blpop",children:"BLPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-29",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BLPOP key [key ...] timeout\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BLPOP is a blocking list pop primitive. It is the blocking version of ",(0,i.jsx)(n.a,{href:"#lpop",children:"LPOP"})," because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the head of the first list that is non-empty, with the given keys being checked in the order that they are given."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"brpop",children:"BRPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-30",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BRPOP key [key ...] timeout\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BRPOP is a blocking list pop primitive. It is the blocking version of ",(0,i.jsx)(n.a,{href:"#rpop",children:"RPOP"})," because it blocks the connection when there are no elements to pop from any of the given lists. An element is popped from the tail of the first list that is non-empty, with the given keys being checked in the order that they are given."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lindex",children:"LINDEX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-31",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LINDEX key index\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes the element at index index in the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),". The index is zero-based. Negative indices can be used to designate elements starting at the tail of the list."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"linsert",children:"LINSERT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-32",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LINSERT key BEFORE|AFTER pivot element\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Inserts element in the list stored at ",(0,i.jsx)(n.strong,{children:"key"})," either before or after the reference value pivot. When key does not exist, it is considered an empty list and no operation is performed."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"llen",children:"LLEN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-33",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LLEN key\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the length of the list stored at key. If key does not exist, it is interpreted as an empty list and 0 is returned."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lmove",children:"LMOVE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-34",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LMOVE source destination LEFT|RIGHT LEFT|RIGHT\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Atomically returns and removes the first/last element (head/tail depending on the wherefrom argument) of the list stored at ",(0,i.jsx)(n.strong,{children:"source"}),", and pushes the element at the first/last element (head/tail depending on the whereto argument) of the list stored at ",(0,i.jsx)(n.strong,{children:"destination"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This command comes in place of the now deprecated RPOPLPUSH. Doing LMOVE RIGHT LEFT is equivalent."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lmpop",children:"LMPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-35",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LMPOP numkeys key [key ...] <LEFT | RIGHT> [COUNT count]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Pops one or more elements from the first non-empty list key from the list of provided key names."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lpop",children:"LPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-36",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LPOP key [count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes and returns the first elements of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"By default, the command pops a single element from the beginning of the list. When provided with the optional count argument, the reply will consist of up to count elements, depending on the list's length."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lpos",children:"LPOS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-37",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len]\n"})}),"\n",(0,i.jsx)(n.p,{children:'The command returns the index of matching elements inside a Redis list. By default, when no options are given, it will scan the list from head to tail, looking for the first match of "element". If the element is found, its index (the zero-based position in the list) is returned. Otherwise, if no match is found, nil is returned.'}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-11",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Any of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Null reply: if there is no matching element."}),"\n",(0,i.jsx)(n.li,{children:"Integer reply: an integer representing the matching element."}),"\n",(0,i.jsx)(n.li,{children:"Array reply: If the COUNT option is given, an array of integers representing the matching elements (or an empty array if there are no matches)."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lpush",children:"LPUSH"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-38",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LPUSH key [element] [element ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Insert all the specified values at the head of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),". If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, it is created as empty list before performing the push operations."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lpushx",children:"LPUSHX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-39",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LPUSHX key [element] [element ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Inserts specified values at the head of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),", only if ",(0,i.jsx)(n.strong,{children:"key"})," already exists and holds a list. In contrary to LPUSH, no operation will be performed when ",(0,i.jsx)(n.strong,{children:"key"})," does not yet exist."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lrange",children:"LRANGE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-40",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LRANGE key start stop\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the specified elements of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),". The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lrem",children:"LREM"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-41",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LREM key count element\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes the first count occurrences of elements equal to element from the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),". The ",(0,i.jsx)(n.strong,{children:"count"})," argument influences the operation in the following ways:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"count > 0:"}),"  Remove elements equal to element moving from head to tail."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"count < 0:"})," Remove elements equal to element moving from tail to head."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"count = 0:"})," Remove all elements equal to element."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lset",children:"LSET"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-42",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LSET key index element\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Sets the list element at ",(0,i.jsx)(n.strong,{children:"index"})," to ",(0,i.jsx)(n.strong,{children:"element"}),". For more information on the index argument, see ",(0,i.jsx)(n.a,{href:"#lindex",children:"LINDEX"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"An error is returned for out of range indexes."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"ltrim",children:"LTRIM"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-43",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    LTRIM key start stop\n"})}),"\n",(0,i.jsx)(n.p,{children:"Trim an existing list so that it will contain only the specified range of elements specified. Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"rpop",children:"RPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-44",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    RPOP key [count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes and returns the last elements of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"By default, the command pops a single element from the end of the list. When provided with the optional count argument, the reply will consist of up to count elements, depending on the list's length."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"rpoplpush",children:"RPOPLPUSH"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-45",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    RPOPLPUSH source destination\n"})}),"\n",(0,i.jsx)(n.p,{children:"Atomically returns and removes the last element (tail) of the list stored at source, and pushes the element at the first element (head) of the list stored at destination."}),"\n",(0,i.jsxs)(n.p,{children:["It can be replaced by ",(0,i.jsx)(n.a,{href:"#lmove",children:"LMOVE"})," with the RIGHT and LEFT arguments when migrating or writing new code."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"rpush",children:"RPUSH"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-46",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    RPUSH key element [element]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Insert all the specified values at the tail of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),". If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, it is created as empty list before performing the push operation."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"rpushx",children:"RPUSHX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-47",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    RPUSHX key element [element]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Inserts specified values at the tail of the list stored at ",(0,i.jsx)(n.strong,{children:"key"}),", only if ",(0,i.jsx)(n.strong,{children:"key"})," already exists and holds a list. In contrary to ",(0,i.jsx)(n.a,{href:"#rpush",children:"RPUSH"}),", no operation will be performed when ",(0,i.jsx)(n.strong,{children:"key"})," does not yet exist."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"set",children:"Set"}),"\n",(0,i.jsx)(n.h3,{id:"sadd",children:"SADD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-48",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SADD key member [member]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Adds the specified members to the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),". Specified members that are already a member of this set are ignored. If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new set is created before adding the specified members."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"scard",children:"SCARD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-49",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SCARD key\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the set cardinality (number of elements) of the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"smembers",children:"SMEMBERS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-50",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SMEMBERS key\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns all the members of the set value stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"smove",children:"SMOVE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-51",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SMOVE source destination member\n"})}),"\n",(0,i.jsx)(n.p,{children:"Move member from the set at source to the set at destination. This operation is atomic. In every given moment the element will appear to be a member of source or destination for other clients."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"spop",children:"SPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-52",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SPOP key [count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes and returns one or more random members from the set value stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sismember",children:"SISMEMBER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-53",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SISMEMBER key member\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns if ",(0,i.jsx)(n.strong,{children:"member"})," is a member of the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"smismember",children:"SMISMEMBER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-54",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SMISMEMBER key member [member ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns whether each ",(0,i.jsx)(n.strong,{children:"member"})," is a member of the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-12",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: a list representing the membership of the given elements, in the same order as they are requested."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"srandmember",children:"SRANDMEMBER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-55",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SRANDMEMBER key [count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When called with just the ",(0,i.jsx)(n.strong,{children:"key"})," argument, return a random element from the set value stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the provided ",(0,i.jsx)(n.strong,{children:"count"})," argument is positive, return an array of ",(0,i.jsx)(n.strong,{children:"distinct elements"}),". The array's length is either ",(0,i.jsx)(n.strong,{children:"count"})," or the set's cardinality (SCARD), whichever is lower."]}),"\n",(0,i.jsxs)(n.p,{children:["If called with a negative ",(0,i.jsx)(n.strong,{children:"count"}),", the behavior changes and the command is allowed to return the ",(0,i.jsx)(n.strong,{children:"same element multiple times"}),". In this case, the number of returned elements is the absolute value of the specified ",(0,i.jsx)(n.strong,{children:"count"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"srem",children:"SREM"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-56",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SREM key member [member]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes the specified members from the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),". Specified members that are not a member of this set are ignored."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, it is treated as an empty set and this command returns 0."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sscan",children:"SSCAN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-57",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SSCAN key cursor [MATCH pattern] [COUNT count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Iterates elements of Sets types. Same as ",(0,i.jsx)(n.a,{href:"#hscan",children:"HSCAN"})," and ",(0,i.jsx)(n.a,{href:"#zscan",children:"ZSCAN"})," commands, SSCAN is used in order to incrementally iterate over the elements of the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"match"})," parameter allows to apply a filter to elements after they have been retrieved from the collection. The ",(0,i.jsx)(n.strong,{children:"count"})," option sets a limit to the maximum number of items returned from the server to this command. This limit is also set in conjunction with the object-scan-count-limit of the global server settings."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sunion",children:"SUNION"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-58",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SUNION key [key ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the members of the set resulting from the union of all the given sets.\r\nKeys that do not exist are considered to be empty sets."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sunionstore",children:"SUNIONSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-59",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SUNIONSTORE destination key [key ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command is equal to ",(0,i.jsx)(n.a,{href:"#SUNION",children:"SUNION"}),", but instead of returning the resulting set, it is stored in ",(0,i.jsx)(n.strong,{children:"destination"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.strong,{children:"destination"})," already exists, it is overwritten."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sinter",children:"SINTER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-60",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SINTER key [key ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the members of the set resulting from the intersection of all the given sets.\r\nKeys that do not exist are considered to be empty sets."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sinterstore",children:"SINTERSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-61",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SINTERSTORE destination key [key ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command is equal to ",(0,i.jsx)(n.a,{href:"#INTER",children:"SINTER"}),", but instead of returning the resulting set, it is stored in ",(0,i.jsx)(n.strong,{children:"destination"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.strong,{children:"destination"})," already exists, it is overwritten."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sintercard",children:"SINTERCARD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-62",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SINTERCARD numkeys [key ...] [LIMIT limit]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the number of members in the resulting set from the intersection of all the given sets.\r\nKeys that do not exist are considered to be empty sets."}),"\n",(0,i.jsxs)(n.p,{children:["The optional ",(0,i.jsx)(n.code,{children:"LIMIT"})," argument specifies an upper bound on the number of intersecting members to count."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sdiff",children:"SDIFF"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-63",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SDIFF key [key ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the members of the set resulting from the difference between the ",(0,i.jsx)(n.strong,{children:"first"})," set and all the successive sets."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Keys"})," that do not exist are considered to be empty sets."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"sdiffstore",children:"SDIFFSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-64",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    SDIFFSTORE destination key [key ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command is equal to ",(0,i.jsx)(n.a,{href:"#SDIFF",children:"SDIFF"}),", but instead of returning the resulting set, it is stored in ",(0,i.jsx)(n.strong,{children:"destination"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.strong,{children:"destination"})," already exists, it is overwritten."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"sorted-set",children:"Sorted Set"}),"\n",(0,i.jsx)(n.h3,{id:"zadd",children:"ZADD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-65",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZADD key score member [score member ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Adds all the specified members with the specified scores to the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),". It is possible to specify multiple score / member pairs. If a specified member is already a member of the sorted set, the score is updated and the element reinserted at the right position to ensure the correct ordering."]}),"\n",(0,i.jsx)(n.p,{children:"If key does not exist, a new sorted set with the specified members as sole members is created, like if the sorted set was empty."}),"\n",(0,i.jsx)(n.p,{children:"The score values should be the string representation of a double precision floating point number."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zcard",children:"ZCARD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-66",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZCARD key\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the sorted set cardinality (number of elements) of the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zcount",children:"ZCOUNT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-67",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZCOUNT key min max\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the number of elements in the sorted set at ",(0,i.jsx)(n.strong,{children:"key"})," with a score between min and max."]}),"\n",(0,i.jsxs)(n.p,{children:["The min and max arguments have the same semantic as described for ",(0,i.jsx)(n.a,{href:"#zrangebyscore",children:"ZRANGEBYSCORE"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zdiff",children:"ZDIFF"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-68",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZDIFF numkeys key [key ...] [WITHSCORES]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the difference between the first and all successive input sorted sets keys. The total number of input keys is specified by numkeys."}),"\n",(0,i.jsx)(n.p,{children:"Keys that do not exist are considered to be empty sets."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zdiffstore",children:"ZDIFFSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-69",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZDIFFSTORE destination numkeys key [key ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Computes the difference between the first and all successive input sorted sets and stores the result in destination. The total number of input keys is specified by numkeys."}),"\n",(0,i.jsx)(n.p,{children:"Keys that do not exist are considered to be empty sets."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-13",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Integer reply: the number of members in the resulting sorted set at destination."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zincrby",children:"ZINCRBY"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-70",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZINCRBY key increment member\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Increments the score of member in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"})," by increment. If member does not exist in the sorted set, it is added with increment as its score (as if its previous score was 0.0). If ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, a new sorted set with the specified member as its sole member is created."]}),"\n",(0,i.jsxs)(n.p,{children:["An error is returned when ",(0,i.jsx)(n.strong,{children:"key"})," exists but does not hold a sorted set."]}),"\n",(0,i.jsx)(n.p,{children:"The score value should be the string representation of a numeric value, and accepts double precision floating point numbers. It is possible to provide a negative value to decrement the score."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zinter",children:"ZINTER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-71",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE <SUM|MIN|MAX>] [WITHSCORES]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Computes the intersection of the sorted sets given by the specified keys and returns the result. It is possible to specify multiple keys."}),"\n",(0,i.jsx)(n.p,{children:"The result is a new sorted set with the same elements as the input sets, but with scores equal to the sum of the scores of the elements in the input sets."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zintercard",children:"ZINTERCARD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-72",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZINTERCARD numkeys key [key ...] [LIMIT limit]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the number of elements in the intersection of the sorted sets given by the specified keys."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zinterstore",children:"ZINTERSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-73",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE <SUM|MIN|MAX>]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Computes the intersection of the sorted sets given by the specified keys and stores the result in the destination key."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zlexcount",children:"ZLEXCOUNT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-74",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZLEXCOUNT key min max\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns the number of elements in the sorted set at ",(0,i.jsx)(n.strong,{children:"key"})," with a value between min and max."]}),"\n",(0,i.jsxs)(n.p,{children:["The min and max arguments have the same meaning as described for ",(0,i.jsx)(n.a,{href:"#zrangebylex",children:"ZRANGEBYLEX"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zmscore",children:"ZMSCORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-75",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZMSCORE key member [member ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the scores associated with the specified ",(0,i.jsx)(n.strong,{children:"members"})," in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For every ",(0,i.jsx)(n.strong,{children:"member"})," that does not exist in the sorted set, a nil value is returned."]}),"\n",(0,i.jsx)(n.p,{children:"Returns one of the following:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Nil reply:"})," if the member does not exist in the sorted set.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.em,{children:"Array reply:"})," a list of string ",(0,i.jsx)(n.strong,{children:"member"})," scores as double-precision floating point numbers."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"bzmpop",children:"BZMPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-76",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BZMPOP timeout numkeys key [key ...] <MIN | MAX> [COUNT count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BZMPOP is the blocking variant of ",(0,i.jsx)(n.a,{href:"#zmpop",children:"ZMPOP"}),". When any of the sorted sets contains elements, this command behaves exactly like ZMPOP. When used inside a MULTI/EXEC block, this command behaves exactly like ZMPOP. When all sorted sets are empty, Garnet will block the connection until another client pushes to it or until timeout (a double value specifying the maximum number of seconds to block) is reached. A timeout of zero can be used to block indefinitely."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MIN"}),": Remove elements starting with the lowest scores"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MAX"}),": Remove elements starting with the highest scores"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"COUNT"}),": Specifies how many elements to pop (default is 1)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-14",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"One of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Null reply: when no element could be popped."}),"\n",(0,i.jsx)(n.li,{children:"Array reply: a two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"bzpopmax",children:"BZPOPMAX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-77",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BZPOPMAX key [key ...] timeout\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BZPOPMAX is the blocking variant of ",(0,i.jsx)(n.a,{href:"#zpopmax",children:"ZPOPMAX"}),". When any of the sorted sets contains elements, this command behaves exactly like ZPOPMAX. When used inside a MULTI/EXEC block, this command behaves exactly like ZPOPMAX. When all sorted sets are empty, Garnet will block the connection until another client pushes to it or until timeout (a double value specifying the maximum number of seconds to block) is reached. A timeout of zero can be used to block indefinitely."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-15",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"One of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Null reply: when no element could be popped and the timeout expired."}),"\n",(0,i.jsx)(n.li,{children:"Array reply: the keyname, popped member, and its score."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"bzpopmin",children:"BZPOPMIN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-78",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    BZPOPMIN key [key ...] timeout\n"})}),"\n",(0,i.jsxs)(n.p,{children:["BZPOPMIN is the blocking variant of ",(0,i.jsx)(n.a,{href:"#zpopmin",children:"ZPOPMIN"}),". When any of the sorted sets contains elements, this command behaves exactly like ZPOPMIN. When used inside a MULTI/EXEC block, this command behaves exactly like ZPOPMIN. When all sorted sets are empty, Garnet will block the connection until another client pushes to it or until timeout (a double value specifying the maximum number of seconds to block) is reached. A timeout of zero can be used to block indefinitely."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-16",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"One of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Null reply: when no element could be popped and the timeout expired."}),"\n",(0,i.jsx)(n.li,{children:"Array reply: the keyname, popped member, and its score."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zmpop",children:"ZMPOP"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-79",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZMPOP numkeys key [key ...] <MIN | MAX> [COUNT count]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Removes and returns one or more members with the lowest scores (default) or highest scores from the sorted set or sorted sets."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MIN: Remove elements starting with the lowest scores"}),"\n",(0,i.jsx)(n.li,{children:"MAX: Remove elements starting with the highest scores"}),"\n",(0,i.jsx)(n.li,{children:"COUNT: Specifies how many elements to pop (default is 1)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpopmax",children:"ZPOPMAX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-80",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPOPMAX key [count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes and returns up to count members with the highest scores in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"When left unspecified, the default value for count is 1. Specifying a count value that is higher than the sorted set's cardinality will not produce an error. When returning multiple elements, the one with the highest score will be the first, followed by the elements with lower scores."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpopmin",children:"ZPOPMIN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-81",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPOPMIN key [count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes and returns up to count members with the lowest scores in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"When left unspecified, the default value for count is 1. Specifying a count value that is higher than the sorted set's cardinality will not produce an error. When returning multiple elements, the one with the lowest score will be the first, followed by the elements with greater scores."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrandmember",children:"ZRANDMEMBER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-82",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZRANDMEMBER key [count [WITHSCORES]]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When called with just the key argument, return a random element from the sorted set value stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the provided count argument is positive, return an array of distinct elements. The array's length is either count or the sorted set's cardinality ",(0,i.jsx)(n.a,{href:"#zcard",children:"ZCARD"}),", whichever is lower."]}),"\n",(0,i.jsx)(n.p,{children:"If called with a negative count, the behavior changes and the command is allowed to return the same element multiple times. In this case, the number of returned elements is the absolute value of the specified count."}),"\n",(0,i.jsx)(n.p,{children:"The optional WITHSCORES modifier changes the reply so it includes the respective scores of the randomly selected elements from the sorted set."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrange",children:"ZRANGE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-83",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZRANGE key start stop [BYSCORE|BYLEX] [REV] [LIMIT offset count] [WITHSCORES]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the specified range of elements in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ZRANGE"})," can perform different types of range queries: by index (rank), by the score, or by lexicographical order."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrangebylex",children:"ZRANGEBYLEX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-84",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZRANGEBYLEX key min max [LIMIT offset count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at ",(0,i.jsx)(n.strong,{children:"key"})," with a value between min and max."]}),"\n",(0,i.jsx)(n.p,{children:"If the elements in the sorted set have different scores, the returned elements are unspecified."}),"\n",(0,i.jsxs)(n.p,{children:["It can be replaced by ",(0,i.jsx)(n.a,{href:"#zrange",children:"ZRANGE"})," with the BYLEX argument when migrating from older versions."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrangebyscore",children:"ZRANGEBYSCORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-85",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns all the elements in the sorted set at ",(0,i.jsx)(n.strong,{children:"key"})," with a score between min and max (including elements with score equal to min or max). The elements are considered to be ordered from low to high scores."]}),"\n",(0,i.jsx)(n.p,{children:"The elements having the same score are returned in lexicographical order."}),"\n",(0,i.jsxs)(n.p,{children:["It can be replaced by ",(0,i.jsx)(n.a,{href:"#zrange",children:"ZRANGE"})," with the BYSCORE argument when migrating or writing new code."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrank",children:"ZRANK"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-86",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZRANK key member [WITHSCORE]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the rank of member in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),", with the scores ordered from low to high. The rank (or index) is 0-based, which means that the member with the lowest score has rank 0."]}),"\n",(0,i.jsx)(n.p,{children:"The optional WITHSCORE argument supplements the command's reply with the score of the element returned."}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.a,{href:"#zrevrank",children:"ZREVRANK"})," to get the rank of an element with the scores ordered from high to low."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrem",children:"ZREM"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-87",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREM key member [member ...]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes the specified members from the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),". Non existing members are ignored."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zremrangebylex",children:"ZREMRANGEBYLEX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-88",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREMRANGEBYLEX key min max\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command removes all elements in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"})," between the lexicographical range specified by min and max."]}),"\n",(0,i.jsxs)(n.p,{children:["The meaning of min and max are the same of the ",(0,i.jsx)(n.a,{href:"#zrangebylex",children:"ZRANGEBYLEX"})," command. Similarly, this command actually removes the same elements that ",(0,i.jsx)(n.a,{href:"#zrangebylex",children:"ZRANGEBYLEX"})," would return if called with the same min and max arguments."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrevrangebylex",children:"ZREVRANGEBYLEX"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-89",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ZREVRANGEBYLEX key max min [LIMIT offset count]\n"})}),"\n",(0,i.jsx)(n.p,{children:"The ZREVRANGEBYLEX command returns a range of members in a sorted set, by lexicographical order, ordered from higher to lower strings."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-17",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: list of elements in the specified range."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zremrangebyscore",children:"ZREMRANGEBYSCORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-90",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREMRANGEBYSCORE key min max\n"})}),"\n",(0,i.jsx)(n.p,{children:"Removes all elements in the sorted set stored at key with a score between min and max (inclusive)."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zremrangebyrank",children:"ZREMRANGEBYRANK"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-91",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREMRANGEBYRANK key start stop\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes all elements in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"})," with rank between start and stop. Both start and stop are 0 -based indexes with 0 being the element with the lowest score. These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. For example: -1 is the element with the highest score, -2 the element with the second highest score and so forth."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zremrangebyscore-1",children:"ZREMRANGEBYSCORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-92",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREMRANGEBYSCORE key min max\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Removes all elements in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"})," with a score between min and max (inclusive)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrevrange",children:"ZREVRANGE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-93",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREVRANGE key start stop [WITHSCORES]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the specified range of elements in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),". The elements are considered to be ordered from the highest to the lowest score. Descending lexicographical order is used for elements with equal score."]}),"\n",(0,i.jsxs)(n.p,{children:["Apart from the reversed ordering, ",(0,i.jsx)(n.strong,{children:"ZREVRANGE"})," is similar to ",(0,i.jsx)(n.a,{href:"#zrange",children:"ZRANGE"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrevrangebyscore",children:"ZREVRANGEBYSCORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-94",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns all the elements in the sorted set at key with a score between max and min (including elements with score equal to max or min)."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrevrank",children:"ZREVRANK"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-95",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZREVRANK key member [WITHSCORE]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the rank of member in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"key"}),", with the scores ordered from high to low. The rank (or index) is 0-based, which means that the member with the highest score has rank 0."]}),"\n",(0,i.jsx)(n.p,{children:"The optional WITHSCORE argument supplements the command's reply with the score of the element returned."}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.a,{href:"#zrank",children:"ZRANK"})," to get the rank of an element with the scores ordered from low to high."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zscan",children:"ZSCAN"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-96",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZSCAN key cursor [MATCH pattern] [COUNT count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Iterates over the elements of a Sorted Set. Same as ",(0,i.jsx)(n.a,{href:"#hscan",children:"HSCAN"})," and ",(0,i.jsx)(n.a,{href:"#sscan",children:"SSCAN"})," commands, ",(0,i.jsx)(n.strong,{children:"ZSCAN"})," is used in order to incrementally iterate over the elements of the set stored at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"match"})," parameter allows to apply a filter to elements after they have been retrieved from the collection. The ",(0,i.jsx)(n.strong,{children:"count"})," option sets a limit to the maximum number of items returned from the server to this command. This limit is also set in conjunction with the object-scan-count-limit of the global server settings."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zscore",children:"ZSCORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-97",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZSCORE key member\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns the score of member in the sorted set at ",(0,i.jsx)(n.strong,{children:"key"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If member does not exist in the sorted set, or ",(0,i.jsx)(n.strong,{children:"key"})," does not exist, nil is returned."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zrangestore",children:"ZRANGESTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-98",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZRANGESTORE dst src min max [BYSCORE|BYLEX] [REV] [LIMIT offset count]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Stores the specified range of elements in the sorted set stored at ",(0,i.jsx)(n.strong,{children:"src"})," into the sorted set stored at ",(0,i.jsx)(n.strong,{children:"dst"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zunion",children:"ZUNION"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-99",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the union of the input sorted sets specified by the keys. The total number of input keys is specified by numkeys."}),"\n",(0,i.jsx)(n.p,{children:"Keys that do not exist are considered to be empty sets."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-18",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: the result of the union with, optionally, their scores when WITHSCORES is used."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zunionstore",children:"ZUNIONSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-100",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE <SUM | MIN | MAX>] \n"})}),"\n",(0,i.jsx)(n.p,{children:"Computes the union of the input sorted sets specified by the keys and stores the result in destination. The total number of input keys is specified by numkeys."}),"\n",(0,i.jsx)(n.p,{children:"Keys that do not exist are considered to be empty sets."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-19",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Integer reply: the number of members in the resulting sorted set at destination."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zexpire",children:"ZEXPIRE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-101",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZEXPIRE key seconds [NX | XX | GT | LT] MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Sets a timeout on one or more members of a sorted set key. After the timeout has expired, the members will automatically be deleted. The timeout is specified in seconds."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on members that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on members that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-20",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the member doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zexpireat",children:"ZEXPIREAT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-102",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZEXPIREAT key unix-time-seconds [NX | XX | GT | LT] MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Sets an absolute expiration time (Unix timestamp in seconds) for one or more sorted set members. After the timestamp has passed, the members will automatically be deleted."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on members that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on members that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-21",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the member doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpexpire",children:"ZPEXPIRE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-103",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPEXPIRE key milliseconds [NX | XX | GT | LT] MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HEXPIRE but the timeout is specified in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on members that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on members that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-22",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the member doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpexpireat",children:"ZPEXPIREAT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-104",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT] MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HEXPIREAT but uses Unix timestamp in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.p,{children:"The command supports several options to control when the expiration should be set:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Only set expiry on members that have no existing expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only set expiry on members that already have an expiry set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GT:"})," Only set expiry when it's greater than the current expiry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LT:"})," Only set expiry when it's less than the current expiry"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"NX"}),", ",(0,i.jsx)(n.strong,{children:"XX"}),", ",(0,i.jsx)(n.strong,{children:"GT"}),", and ",(0,i.jsx)(n.strong,{children:"LT"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-23",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was set"}),"\n",(0,i.jsx)(n.li,{children:"0 if the member doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"-1 if timeout was not set due to condition not being met"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zttl",children:"ZTTL"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-105",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZTTL key MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the remaining time to live in seconds for one or more sorted set members that have a timeout set."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-24",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TTL in seconds if the member exists and has an expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the member exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the member does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpttl",children:"ZPTTL"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-106",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPTTL key MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HTTL but returns the remaining time to live in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-25",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TTL in milliseconds if the member exists and has an expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the member exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the member does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zexpiretime",children:"ZEXPIRETIME"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-107",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZEXPIRETIME key MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the absolute Unix timestamp (in seconds) at which the specified sorted set members will expire."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-26",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unix timestamp in seconds when the member will expire"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the member exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the member does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpexpiretime",children:"ZPEXPIRETIME"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-108",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPEXPIRETIME key MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similar to HEXPIRETIME but returns the expiry timestamp in milliseconds instead of seconds."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-27",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unix timestamp in milliseconds when the member will expire"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the member exists but has no expiry set"}),"\n",(0,i.jsx)(n.li,{children:"-2 if the member does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zpersist",children:"ZPERSIST"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-109",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZPERSIST key MEMBERS nummembers member [member ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Removes the expiration from the specified sorted set members, making them persistent."}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-28",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Array reply: For each member, returns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"1 if the timeout was removed"}),"\n",(0,i.jsx)(n.li,{children:"0 if the member exists but has no timeout"}),"\n",(0,i.jsx)(n.li,{children:"-1 if the member does not exist"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"zcollect",children:"ZCOLLECT"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-110",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    ZCOLLECT key [key ...]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Manualy trigger cleanup of expired member from memory for a given Hash set key."}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"*"})," as the key to collect it from all sorted set keys."]}),"\n",(0,i.jsx)(n.h4,{id:"resp-reply-29",children:"Resp Reply"}),"\n",(0,i.jsx)(n.p,{children:"Simple reply: OK response\r\nError reply: ERR ZCOLLECT scan already in progress"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"geospatial-indices",children:"Geospatial indices"}),"\n",(0,i.jsx)(n.h3,{id:"geoadd",children:"GEOADD"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-111",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    GEOADD key [NX | XX] [CH] longitude latitude member [longitude latitude member ... ]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Adds the specified geospatial items (longitude, latitude, name) to the specified key. Data is stored into the key as a sorted set, in a way that makes it possible to query the items with the ",(0,i.jsx)(n.a,{href:"#geosearch",children:"GEOSEARCH"})," command."]}),"\n",(0,i.jsx)(n.p,{children:"The command takes arguments in the standard format x,y so the longitude must be specified before the latitude. There are limits to the coordinates that can be indexed: areas very near to the poles are not indexable."}),"\n",(0,i.jsx)(n.p,{children:"The exact limits, are the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Valid longitudes are from -180 to 180 degrees."}),"\n",(0,i.jsx)(n.li,{children:"Valid latitudes are from -85.05112878 to 85.05112878 degrees."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The command will report an error when the user attempts to index coordinates outside the specified ranges."}),"\n",(0,i.jsxs)(n.p,{children:["Note: there is no ",(0,i.jsx)(n.strong,{children:"GEODEL"})," command because you can use ",(0,i.jsx)(n.a,{href:"#zrem",children:"ZREM"})," to remove elements. The Geo index structure is a sorted set."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"GEOADD"})," also provides the following options:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"XX:"})," Only update elements that already exist. Never add elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NX:"})," Don't update already existing elements. Always add new elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CH:"})," Modify the return value from the number of new elements added, to the total number of elements changed (CH is an abbreviation of changed)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Changed elements are new elements added and elements already existing for which the coordinates was updated. So elements specified in the command line having the same score as they had in the past are not counted. Note: normally, the return value of ",(0,i.jsx)(n.strong,{children:"GEOADD"})," only counts the number of new elements added."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: The ",(0,i.jsx)(n.strong,{children:"XX"})," and ",(0,i.jsx)(n.strong,{children:"NX"})," options are mutually exclusive."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"geodist",children:"GEODIST"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-112",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    GEODIST key member1 member2 [M|KM|FT|MI]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return the distance between two members in the geospatial index represented by the sorted set."}),"\n",(0,i.jsx)(n.p,{children:"Given a sorted set representing a geospatial index, populated using the GEOADD command, the command returns the distance between the two specified members in the specified unit."}),"\n",(0,i.jsx)(n.p,{children:"If one or both the members are missing, the command returns NULL."}),"\n",(0,i.jsx)(n.p,{children:"The unit must be one of the following, and defaults to meters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"m for meters."}),"\n",(0,i.jsx)(n.li,{children:"km for kilometers."}),"\n",(0,i.jsx)(n.li,{children:"mi for miles."}),"\n",(0,i.jsx)(n.li,{children:"ft for feet."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The distance is computed assuming that the Earth is a perfect sphere, so errors up to 0.5% are possible in edge cases."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"geohash",children:"GEOHASH"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-113",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    GEOHASH key [member [member ...]]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Return valid Geohash strings representing the position of one or more elements in a sorted set value representing a geospatial index (where elements were added using ",(0,i.jsx)(n.a,{href:"#geoadd",children:"GEOADD"}),")."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"geopos",children:"GEOPOS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-114",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    GEOPOS key [member [member ...]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return the positions (longitude,latitude) of all the specified members of the geospatial index represented by the sorted set at key."}),"\n",(0,i.jsxs)(n.p,{children:["Given a sorted set representing a geospatial index, populated using the ",(0,i.jsx)(n.a,{href:"#geoadd",children:"GEOADD"})," command, it is often useful to obtain back the coordinates of specified members. When the geospatial index is populated via ",(0,i.jsx)(n.a,{href:"#geoadd",children:"GEOADD"})," the coordinates are converted into a 52 bit geohash, so the coordinates returned may not be exactly the ones used in order to add the elements, but small errors may be introduced."]}),"\n",(0,i.jsx)(n.p,{children:"The command can accept a variable number of arguments so it always returns an array of positions even when a single element is specified."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"georadius",children:"GEORADIUS"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-115",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"GEORADIUS_RO key longitude latitude radius <M | KM | FT | MI>\r\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\r\n  [STORE key | STOREDIST key]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Return the members of a sorted set populated with geospatial information using ",(0,i.jsx)(n.a,{href:"#geoadd",children:"GEOADD"}),", which are within the borders of the area specified with the center location and the maximum distance from the center (the radius)."]}),"\n",(0,i.jsx)(n.p,{children:"The common use case for this command is to retrieve geospatial items near a specified point not farther than a given amount of meters (or other units). This allows, for example, to suggest mobile users of an application nearby places."}),"\n",(0,i.jsx)(n.p,{children:"The radius is specified in one of the following units:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"m for meters."}),"\n",(0,i.jsx)(n.li,{children:"km for kilometers."}),"\n",(0,i.jsx)(n.li,{children:"mi for miles."}),"\n",(0,i.jsx)(n.li,{children:"ft for feet."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The command optionally returns additional information using the following options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHDIST:"})," Also return the distance of the returned items from the specified center point. The distance is returned in the same unit specified as the radius argument of the command."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHCOORD:"})," Also return the longitude and latitude of the matching items."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHHASH:"})," Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The command default is to return unsorted items. Two different sorting methods can be invoked using the following two options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ASC:"})," Sort returned items from the nearest to the farthest, relative to the center point."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DESC:"})," Sort returned items from the farthest to the nearest, relative to the center point."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By default all the matching items are returned. It is possible to limit the results to the first N matching items by using the COUNT option. When ANY is provided the command will return as soon as enough matches are found, so the results may not be the ones closest to the specified point, but on the other hand, the effort invested by the server is significantly lower. When ANY is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them, so to query very large areas with a very small COUNT option may be slow even if just a few results are returned."}),"\n",(0,i.jsx)(n.p,{children:"By default the command returns the items to the client. It is possible to store the results with one of these options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"STORE:"})," Store the items in a sorted set populated with their geospatial information."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"STOREDIST:"})," Store the items in a sorted set populated with their distance from the center as a floating point number, in the same unit specified in the radius."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reply"})}),"\n",(0,i.jsx)(n.p,{children:"One of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If STORE or STOREDIST option is specified, the number of elements in the resulting set (Integer)."}),"\n",(0,i.jsx)(n.li,{children:"If no WITH* option is specified, an Array reply of matched member names"}),"\n",(0,i.jsxs)(n.li,{children:["If WITHCOORD, WITHDIST, or WITHHASH options are specified, the command returns an Array reply of arrays, where each sub-array represents a single item:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The distance from the center as a floating point number, in the same unit specified in the radius."}),"\n",(0,i.jsx)(n.li,{children:"The Geohash integer."}),"\n",(0,i.jsx)(n.li,{children:"The coordinates as a two items x,y array (longitude,latitude)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"georadius_ro",children:"GEORADIUS_RO"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-116",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"GEORADIUS_RO key longitude latitude radius <M | KM | FT | MI>\r\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Return the members of a sorted set populated with geospatial information using ",(0,i.jsx)(n.a,{href:"#geoadd",children:"GEOADD"}),", which are within the borders of the area specified with the center location and the maximum distance from the center (the radius)."]}),"\n",(0,i.jsx)(n.p,{children:"The common use case for this command is to retrieve geospatial items near a specified point not farther than a given amount of meters (or other units). This allows, for example, to suggest mobile users of an application nearby places."}),"\n",(0,i.jsx)(n.p,{children:"The radius is specified in one of the following units:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"m for meters."}),"\n",(0,i.jsx)(n.li,{children:"km for kilometers."}),"\n",(0,i.jsx)(n.li,{children:"mi for miles."}),"\n",(0,i.jsx)(n.li,{children:"ft for feet."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The command optionally returns additional information using the following options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHDIST:"})," Also return the distance of the returned items from the specified center point. The distance is returned in the same unit specified as the radius argument of the command."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHCOORD:"})," Also return the longitude and latitude of the matching items."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHHASH:"})," Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The command default is to return unsorted items. Two different sorting methods can be invoked using the following two options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ASC:"})," Sort returned items from the nearest to the farthest, relative to the center point."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DESC:"})," Sort returned items from the farthest to the nearest, relative to the center point."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By default all the matching items are returned. It is possible to limit the results to the first N matching items by using the COUNT option. When ANY is provided the command will return as soon as enough matches are found, so the results may not be the ones closest to the specified point, but on the other hand, the effort invested by the server is significantly lower. When ANY is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them, so to query very large areas with a very small COUNT option may be slow even if just a few results are returned."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reply"})}),"\n",(0,i.jsx)(n.p,{children:"One of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If no WITH* option is specified, an Array reply of matched member names"}),"\n",(0,i.jsxs)(n.li,{children:["If WITHCOORD, WITHDIST, or WITHHASH options are specified, the command returns an Array reply of arrays, where each sub-array represents a single item:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The distance from the center as a floating point number, in the same unit specified in the radius."}),"\n",(0,i.jsx)(n.li,{children:"The Geohash integer."}),"\n",(0,i.jsx)(n.li,{children:"The coordinates as a two items x,y array (longitude,latitude)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"georadiusbymember",children:"GEORADIUSBYMEMBER"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-117",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"GEORADIUSBYMEMBER_RO key member radius <M | KM | FT | MI>\r\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\r\n  [STORE key | STOREDIST key]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command is exactly like ",(0,i.jsx)(n.a,{href:"#georadius",children:"GEORADIUS"})," with the sole difference that instead of taking, as the center of the area to query, a longitude and latitude value, it takes the name of a member already existing inside the geospatial index represented by the sorted set."]}),"\n",(0,i.jsx)(n.p,{children:"The position of the specified member is used as the center of the query."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"georadiusbymember_ro",children:"GEORADIUSBYMEMBER_RO"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-118",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"GEORADIUSBYMEMBER_RO key member radius <M | KM | FT | MI>\r\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command is exactly like ",(0,i.jsx)(n.a,{href:"#georadius_ro",children:"GEORADIUS_RO"})," with the sole difference that instead of taking, as the center of the area to query, a longitude and latitude value, it takes the name of a member already existing inside the geospatial index represented by the sorted set."]}),"\n",(0,i.jsx)(n.p,{children:"The position of the specified member is used as the center of the query."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"geosearch",children:"GEOSEARCH"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-119",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"    GEOSEARCH key <FROMMEMBER member | FROMLONLAT longitude latitude>\r\n  <BYRADIUS radius <M | KM | FT | MI> | BYBOX width height <M | KM |\r\n  FT | MI>> [ASC | DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST]\r\n  [WITHHASH]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Return the members of a sorted set populated with geospatial information using ",(0,i.jsx)(n.a,{href:"#geoadd",children:"GEOADD"}),", which are within the borders of the area specified by a given shape."]}),"\n",(0,i.jsx)(n.p,{children:"The query's center point is provided by one of these mandatory options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FROMMEMBER:"})," Use the position of the given existing ",(0,i.jsx)(n.em,{children:"member"})," in the sorted set."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FROMLONLAT:"})," Use the given ",(0,i.jsx)(n.em,{children:"longitude"})," and ",(0,i.jsx)(n.em,{children:"latitude"})," position."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The query's shape is provided by this option:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BYRADIUS:"})," Similar to ",(0,i.jsx)(n.a,{href:"#georadius",children:"GEORADIUS"}),", search inside circular area according to given ",(0,i.jsx)(n.em,{children:"radius"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BYBOX:"})," Search inside an axis-aligned rectangle, determined by ",(0,i.jsx)(n.em,{children:"height"})," and ",(0,i.jsx)(n.em,{children:"width"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The command optionally returns additional information using the following options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHDIST:"})," Also return the distance of the returned items from the specified center point. The distance is returned in the same unit as specified for the radius or height and width arguments."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHCOORD:"})," Also return the longitude and latitude of the matching items."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WITHHASH:"})," Also return the raw geohash-encoded sorted set score of the item, in the form of a 52 bit unsigned integer. This is only useful for low level hacks or debugging and is otherwise of little interest for the general user."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Matching items are returned unsorted by default. To sort them, use one of the following two options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ASC:"})," Sort returned items from the nearest to the farthest, relative to the center point."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DESC:"})," Sort returned items from the farthest to the nearest, relative to the center point."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All matching items are returned by default. To limit the results to the first N matching items, use the COUNT ",(0,i.jsx)(n.em,{children:"count"})," option. When the ANY option is used, the command returns as soon as enough matches are found. This means that the results returned may not be the ones closest to the specified point, but the effort invested by the server to generate them is significantly less. When ANY is not provided, the command will perform an effort that is proportional to the number of items matching the specified area and sort them, so to query very large areas with a very small COUNT option may be slow even if just a few results are returned."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reply"})}),"\n",(0,i.jsx)(n.p,{children:"One of the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If no WITH* option is specified, an Array reply of matched member names"}),"\n",(0,i.jsxs)(n.li,{children:["If WITHCOORD, WITHDIST, or WITHHASH options are specified, the command returns an Array reply of arrays, where each sub-array represents a single item:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The distance from the center as a floating point number, in the same unit specified in the radius."}),"\n",(0,i.jsx)(n.li,{children:"The Geohash integer."}),"\n",(0,i.jsx)(n.li,{children:"The coordinates as a two items x,y array (longitude,latitude)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"geosearchstore",children:"GEOSEARCHSTORE"}),"\n",(0,i.jsx)(n.h4,{id:"syntax-120",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"GEOSEARCHSTORE destination source <FROMMEMBER member |\r\n  FROMLONLAT longitude latitude> <BYRADIUS radius <m | km | ft | mi>\r\n  | BYBOX width height <m | km | ft | mi>> [ASC | DESC] [COUNT count\r\n  [ANY]] [STOREDIST]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command is like ",(0,i.jsx)(n.a,{href:"#geosearch",children:"GEOSEARCH"}),", but stores the result in destination key."]}),"\n",(0,i.jsx)(n.p,{children:"When using the STOREDIST option, the command stores the items in a sorted set populated with their distance from the center of the circle or box, as a floating-point number, in the same unit specified for that shape."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reply"})}),"\n",(0,i.jsx)(n.p,{children:"Integer reply: the number of elements in the resulting set"}),"\n",(0,i.jsx)(n.hr,{})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);