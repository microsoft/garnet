"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8126],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function d(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(s.Provider,{value:n},e.children)}},92956:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"extensions/module","title":"Modules","description":"Modules help bundle related custom commands, procedures and transactions into a single binary. Once loaded, a module makes all of its contained custom operations available to users.","source":"@site/docs/extensions/module.md","sourceDirName":"extensions","slug":"/extensions/module","permalink":"/garnet/docs/extensions/module","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/extensions/module.md","tags":[],"version":"current","frontMatter":{"id":"module","sidebar_label":"Modules","title":"Modules"},"sidebar":"garnetDocSidebar","previous":{"title":"Procedures","permalink":"/garnet/docs/extensions/procedure"},"next":{"title":"Overview","permalink":"/garnet/docs/cluster/overview"}}');var i=t(74848),s=t(28453);const d={id:"module",sidebar_label:"Modules",title:"Modules"},r="Modules",a={},c=[];function l(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"modules",children:"Modules"})}),"\n",(0,i.jsxs)(n.p,{children:["Modules help bundle related custom commands, procedures and transactions into a single binary. Once loaded, a module makes all of its contained custom operations available to users.\nAll modules must derive from the ",(0,i.jsx)(n.code,{children:"ModuleBase"})," class and implement the ",(0,i.jsx)(n.code,{children:"OnLoad"})," method to perform module initialization. All custom commands, procedures and transactions implemented within a module get registered with Garnet during initialization using this method:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"OnLoad(ModuleLoadContext context, string[] args)"})}),"\n",(0,i.jsxs)(n.p,{children:["Optional arguments passed in to the module are made available through the ",(0,i.jsx)(n.code,{children:"args"})," parameter.\nThe ",(0,i.jsx)(n.code,{children:"ModuleLoadContext"})," exposes the following APIs to register the module and its components:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ModuleActionStatus Initialize(string name, uint version)"}),(0,i.jsx)(n.br,{}),"\n","This must be the first step to register the module with its name and version information. All other registrations must be performed after this.\nThe ",(0,i.jsx)(n.code,{children:"ModuleActionStatus"})," enum returned indicates the status of module initialization with ",(0,i.jsx)(n.code,{children:"Success"})," status confirming successful registration of the module."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ModuleActionStatus RegisterCommand(string name, CustomRawStringFunctions customFunctions, CommandType type = CommandType.ReadModifyWrite, RespCommandsInfo commandInfo = null, long expirationTicks = 0)"}),"\nAny custom raw string command should be registered using this method with its ",(0,i.jsx)(n.code,{children:"name"}),", implementation of the raw string command in ",(0,i.jsx)(n.code,{children:"customFunctions"}),", ",(0,i.jsx)(n.code,{children:"type"})," indicating whether it is an ReadModifyWrite or Read command (RMW is the default type), optional ",(0,i.jsx)(n.code,{children:"commandInfo"})," to provide details like arity, key specification, acl categories, etc. and the optional ",(0,i.jsx)(n.code,{children:"expirationTicks"})," to govern when the key expires."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ModuleActionStatus RegisterTransaction(string name, Func<CustomTransactionProcedure> proc, RespCommandsInfo commandInfo = null)"}),"\nTransactions should get registered using this with its ",(0,i.jsx)(n.code,{children:"name"}),", a method that returns the tansaction implementation ",(0,i.jsx)(n.code,{children:"proc"})," and optional ",(0,i.jsx)(n.code,{children:"commandInfo"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ModuleActionStatus RegisterType(CustomObjectFactory factory)"}),"\nCustom data types are registered using this method with ",(0,i.jsx)(n.code,{children:"factory"})," being the implementation of the custom object factory that can create instances of the custom object."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ModuleActionStatus RegisterCommand(string name, CustomObjectFactory factory, CustomObjectFunctions command, CommandType type = CommandType.ReadModifyWrite, RespCommandsInfo commandInfo = null)"}),"\nCustom object commands are registered using this with their ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"factory"})," instance registered already using the ",(0,i.jsx)(n.code,{children:"RegisterType"}),", implementation of the custom object command in ",(0,i.jsx)(n.code,{children:"command"}),", ",(0,i.jsx)(n.code,{children:"type"})," indicating whether it is an ReadModifyWrite or Read command (RMW is the default type) and optional ",(0,i.jsx)(n.code,{children:"commandInfo"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ModuleActionStatus RegisterProcedure(string name, CustomProcedure customScriptProc, RespCommandsInfo commandInfo = null)"}),"\nCustom non-transactional procedures are registered using this with their ",(0,i.jsx)(n.code,{children:"name"}),", implementation as ",(0,i.jsx)(n.code,{children:"customScriptProc"})," and optional ",(0,i.jsx)(n.code,{children:"commandInfo"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsx)(n.p,{children:"As a reference of an implementation of a module, see the example in playground\\SampleModule."})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);