"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8135],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var o=t(96540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},43332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"dev/garnet-api","title":"Garnet API","description":"The IGarnetApi interface contains the operators exposed to the public API, which ultimately perform operations over the keys stored in Garnet. It inherits from IGarnetReadApi (read-only commands interface) and IGarnetAdvancedApi (advanced API calls).","source":"@site/docs/dev/garnet-api.md","sourceDirName":"dev","slug":"/dev/garnet-api","permalink":"/garnet/docs/dev/garnet-api","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/dev/garnet-api.md","tags":[],"version":"current","frontMatter":{"id":"garnet-api","sidebar_label":"Garnet API","title":"Garnet API"},"sidebar":"garnetDocSidebar","previous":{"title":"Processing Layer","permalink":"/garnet/docs/dev/processing"},"next":{"title":"Introduction","permalink":"/garnet/docs/dev/tsavorite/intro"}}');var s=t(74848),r=t(28453);const a={id:"garnet-api",sidebar_label:"Garnet API",title:"Garnet API"},d=void 0,i={},c=[{value:"Adding a new command to Garnet",id:"adding-a-new-command-to-garnet",level:3},{value:"Adding command info",id:"adding-command-info",level:3}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"IGarnetApi"})," interface contains the operators exposed to the public API, which ultimately perform operations over the keys stored in Garnet. It inherits from ",(0,s.jsx)(n.strong,{children:"IGarnetReadApi"})," (read-only commands interface) and ",(0,s.jsx)(n.strong,{children:"IGarnetAdvancedApi"})," (advanced API calls)."]}),"\n",(0,s.jsxs)(n.p,{children:["For adding a new operator or command to the API, add a new method signature to the ",(0,s.jsx)(n.strong,{children:"IGarnetReadApi"})," interface in case the command performs read-only operations, or ",(0,s.jsx)(n.strong,{children:"IGarnetApi"})," otherwise."]}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-new-command-to-garnet",children:"Adding a new command to Garnet"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["If you are trying to add a command for your specific Garnet server instance, see ",(0,s.jsx)(n.a,{href:"/garnet/docs/dev/custom-commands",children:"Custom Commands"})]})}),"\n",(0,s.jsx)(n.p,{children:"To add a new command to Garnet, follow these steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If your command operates on an ",(0,s.jsx)(n.strong,{children:"object"})," (i.e. List, SortedSet etc.), add a new enum value to the ",(0,s.jsx)(n.code,{children:"[ObjectName]Operation"})," enum in ",(0,s.jsx)(n.code,{children:"Garnet.server/Objects/[ObjectName]/[ObjectName]Object.cs"}),(0,s.jsx)(n.br,{}),"\n","Otherwise, add a new enum value to the ",(0,s.jsx)(n.code,{children:"RespCommand"})," enum in ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/RespCommand.cs"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Add the parsing logic of the new command name to ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/RespCommand.cs"}),". If the command has a ",(0,s.jsx)(n.strong,{children:"fixed number of arguments"}),", add parsing logic to the ",(0,s.jsx)(n.strong,{children:"FastParseCommand"})," method. Otherwise, add parsing logic to the ",(0,s.jsx)(n.strong,{children:"FastParseArrayCommand"})," method."]}),"\n",(0,s.jsxs)(n.li,{children:["Add a new method signature to ",(0,s.jsx)(n.strong,{children:"IGarnetReadApi"}),", in case the command performs read-only operations, or to ",(0,s.jsx)(n.strong,{children:"IGarnetApi"})," otherwise (",(0,s.jsx)(n.code,{children:"Garnet.server/API/IGarnetAPI.cs"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Add a new method to the ",(0,s.jsx)(n.strong,{children:"RespServerSession"})," class. This method will parse the command from the network buffer, call the storage layer API (method declared in step #3) and write the RESP formatted response back to the network buffer (note that the ",(0,s.jsx)(n.strong,{children:"RespServerSession"})," class is divided across several .cs files, object-specific commands will reside under ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/Objects/[ObjectName]Commands.cs"}),", while others will reside under ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/[Admin|Array|Basic|etc...]Commands.cs"}),", depending on the command type)."]}),"\n",(0,s.jsxs)(n.li,{children:["Back in ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/RespCommand.cs"}),", add the new command case to the ",(0,s.jsx)(n.strong,{children:"ProcessBasicCommands"})," or ",(0,s.jsx)(n.strong,{children:"ProcessArrayCommands"})," method respectively, calling the method that was added in step #4."]}),"\n",(0,s.jsxs)(n.li,{children:["Add a new method to the ",(0,s.jsx)(n.strong,{children:"StorageSession"})," class. This method is part of the storage layer. This storage API ONLY performs the RMW or Read operation calls, and it wraps the Tsavorite API.  (note that the ",(0,s.jsx)(n.strong,{children:"StorageSession"})," class is divided across several .cs files, ",(0,s.jsx)(n.strong,{children:"object store"})," operations will reside under ",(0,s.jsx)(n.code,{children:"Garnet.server/Storage/Session/ObjectStore/[ObjectName]Ops.cs"}),", while ",(0,s.jsx)(n.strong,{children:"main store"})," operations will mainly reside under ",(0,s.jsx)(n.code,{children:"Garnet.server/Storage/Session/MainStore/MainStoreOps.cs"}),", with some exceptions).",(0,s.jsx)(n.br,{}),"\n","To implement the storage-level logic of the new command, follow these guidelines according to the new command type:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Single-key object store command"})}),": If you are adding a command that operates on a single object, the implementation of this method will simply be a call ",(0,s.jsx)(n.code,{children:"[Read|RMW]ObjectStoreOperation[WithOutput]"}),", which in turn will call the ",(0,s.jsx)(n.code,{children:"Operate"})," method in ",(0,s.jsx)(n.code,{children:"Garnet.server/Objects/[ObjectName]/[ObjectName]Object.cs"}),", where you will have to add a new case for the command and and the object-specific command implementation in ",(0,s.jsx)(n.code,{children:"Garnet.server/Objects/[ObjectName]/[ObjectName]ObjectImpl.cs"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Multi-key object store command"})}),": If you are adding a command that operates on multiple objects, you may need to create a transaction in which you will appropriately lock the keys (using the ",(0,s.jsx)(n.code,{children:"TransactionManager"})," instance). You can then operate on multiple objects (for instance using the ",(0,s.jsx)(n.code,{children:"GET"})," & ",(0,s.jsx)(n.code,{children:"SET"})," operations)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Main-store command"})}),": If you are adding a command that operates on the main store, you'll need to call Tsavorite's ",(0,s.jsx)(n.code,{children:"Read"})," or ",(0,s.jsx)(n.code,{children:"RMW"})," methods. If you are calling ",(0,s.jsx)(n.code,{children:"RMW"}),", you will need to implement the initialization and in-place / copy update functionality of the new command in ",(0,s.jsx)(n.code,{children:"Garnet.server/Storage/Functions/MainStore/RMWMethods.cs"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["If the command supports being called in a transaction context, add a new case for the command in the ",(0,s.jsx)(n.code,{children:"TransactionManager.GetKeys"})," method and return the appropriate key locks required by the command (",(0,s.jsx)(n.code,{children:"Garnet.server/Transaction/TxnKeyManager.cs"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Add tests that run the command and check its output under valid and invalid conditions, test using both ",(0,s.jsx)(n.code,{children:"SE.Redis"})," and ",(0,s.jsx)(n.code,{children:"LightClient"}),", if applicable. For object commands, add tests to ",(0,s.jsx)(n.code,{children:"Garnet.test/Resp[ObjectName]Tests.cs"}),". For other commands, add to ",(0,s.jsx)(n.code,{children:"Garnet.test/RespTests.cs"})," or ",(0,s.jsx)(n.code,{children:"Garnet.test/Resp[AdminCommands|etc...]Tests.cs"}),", depending on the command type."]}),"\n",(0,s.jsxs)(n.li,{children:["Add newly supported command documentation to the appropriate markdown file under ",(0,s.jsx)(n.code,{children:"website/docs/commands/"}),", and specify the command as supported in ",(0,s.jsx)(n.code,{children:"website/docs/commands/api-compatibility.md"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Add command info by following the next ",(0,s.jsx)(n.a,{href:"#adding-supported-command-info",children:"section"})]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Before you start implementing your command logic, add a basic test that calls the new command, it will be easier to debug and implement missing logic as you go along."})}),"\n",(0,s.jsx)(n.h3,{id:"adding-command-info",children:"Adding command info"}),"\n",(0,s.jsxs)(n.p,{children:["Each supported RESP command in Garnet should have an entry in ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/RespCommandsInfo.json"}),", specifying the command's info.",(0,s.jsx)(n.br,{}),"\n","A command's info can be added manually, but we recommend using the ",(0,s.jsx)(n.code,{children:"CommandInfoUpdater"})," tool to update the JSON file (can be found under ",(0,s.jsx)(n.code,{children:"playground/"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CommandInfoUpdater"})," tool calculates the difference between existing commands in ",(0,s.jsx)(n.code,{children:"Garnet.server/Resp/RespCommandsInfo.json"})," and commands specified in ",(0,s.jsx)(n.code,{children:"CommandInfoUpdater/SupportedCommands.cs"}),". It then attempts to add/remove commands' info as necessary.",(0,s.jsx)(n.br,{}),"\n","Info for Garnet-only commands is retrieved from ",(0,s.jsx)(n.code,{children:"CommandInfoUpdater/GarnetCommandsInfo.json"}),", and info for other RESP commands is retrieved from an external RESP server (which you will need to run locally or have access to in order to run this tool)."]}),"\n",(0,s.jsx)(n.p,{children:"To add command info to Garnet, follow these steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add the supported command and its supported sub-commands (if applicable) to ",(0,s.jsx)(n.code,{children:"CommandInfoUpdater/SupportedCommands.cs"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If you are adding a Garnet-specific command, add its info to ",(0,s.jsx)(n.code,{children:"CommandInfoUpdater/GarnetCommandsInfo.json"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Start some RESP server locally."}),"\n",(0,s.jsxs)(n.li,{children:["Build & run the tool (for syntax help run the tool with ",(0,s.jsx)(n.code,{children:"-h"})," or ",(0,s.jsx)(n.code,{children:"--help"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd playground/CommandInfoUpdater\ndotnet run -- --output ../../libs/resources\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);