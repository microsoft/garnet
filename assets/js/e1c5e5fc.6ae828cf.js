"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4454],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var s=r(96540);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},59141:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"benchmarking/resp-bench","title":"The Resp.benchmark Tool","description":"Garnet project contains a Benchmark tool for running RESP benchmarking using different clients, different workloads and different strategies for measuring throughput, performance and latency.","source":"@site/docs/benchmarking/resp-bench.md","sourceDirName":"benchmarking","slug":"/benchmarking/resp-bench","permalink":"/garnet/docs/benchmarking/resp-bench","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/benchmarking/resp-bench.md","tags":[],"version":"current","frontMatter":{"id":"resp-bench","sidebar_label":"Resp.benchmark","title":"The Resp.benchmark Tool"},"sidebar":"garnetDocSidebar","previous":{"title":"Results (Resp.bench)","permalink":"/garnet/docs/benchmarking/results-resp-bench"},"next":{"title":"Overview","permalink":"/garnet/docs/commands/overview"}}');var i=r(74848),l=r(28453);const a={id:"resp-bench",sidebar_label:"Resp.benchmark",title:"The Resp.benchmark Tool"},t="The Resp.benchmark Tool",o={},c=[{value:"Usage",id:"usage",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Commands benchmarked",id:"commands-benchmarked",level:2},{value:"Raw strings commands",id:"raw-strings-commands",level:3},{value:"Bitmaps commands",id:"bitmaps-commands",level:3},{value:"Hyperloglog commands",id:"hyperloglog-commands",level:3},{value:"Sorted Sets &amp; Geo commands",id:"sorted-sets--geo-commands",level:3},{value:"Server commands",id:"server-commands",level:3},{value:"Type of benchmarks",id:"type-of-benchmarks",level:2},{value:"Online benchmarks",id:"online-benchmarks",level:3},{value:"Offline benchmarks",id:"offline-benchmarks",level:3},{value:"Preloading data for benchmarks",id:"preloading-data-for-benchmarks",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"the-respbenchmark-tool",children:"The Resp.benchmark Tool"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Garnet"})," project contains a Benchmark tool for running RESP benchmarking using different clients, different workloads and different strategies for measuring throughput, performance and latency."]}),"\n",(0,i.jsx)(n.p,{children:"This tool exists under the folder:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"> Garnet\\benchmark\\Resp.benchmark\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["The options available with Resp.benchmark can be seen by running the benchmark tool using  the ",(0,i.jsx)(n.code,{children:"--help"})," command line switch. Example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"> cd Garnet\\benchmark\\Resp.benchmark\n> dotnet run -c Release -f net8.0 -- --help\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.p,{children:"The benchmark operates in two phases."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Load key in database"}),"\n",(0,i.jsx)(n.li,{children:"Run benchmark for a single command"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In both phases ReqGen is used to generate the requests for either loading data\nor performing the benchmark."}),"\n",(0,i.jsx)(n.p,{children:"There are several options to generate requests as indicated by the constructor of the ReqGen class."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"        public ReqGen(\n            int Start,\n            int DbSize,\n            int NumOps,\n            int BatchSize,\n            OpType opType,\n            bool randomGen = true,\n            bool randomServe = true,\n            int keyLen = default,\n            int valueLen = default)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start: Key offset."}),"\n",(0,i.jsx)(n.li,{children:"DbSize: Number of keys in the database"}),"\n",(0,i.jsx)(n.li,{children:"NumOps: Total number of operations to be perfomed"}),"\n",(0,i.jsx)(n.li,{children:"BatchSize: Total number of ops in a batch."}),"\n",(0,i.jsx)(n.li,{children:"opType: Operation to be performed (e.g. GET, MSET, INCR)"}),"\n",(0,i.jsx)(n.li,{children:"randomGen: Whether to generate keys in sequence or randomly."}),"\n",(0,i.jsx)(n.li,{children:"randomServe: Whether serve the requests randomly or in the sequence they were generated."}),"\n",(0,i.jsx)(n.li,{children:"keyLen: The least number of bytes in a key. Keys are assigned from (Start,DbSize) range and padded accordingly to build a set of at least. The default size equals the maximum number of digits of DbSize."}),"\n",(0,i.jsx)(n.li,{children:"valueLen: The total number of bytes in a value."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following method is used to load the data into the database"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"        public void LoadData(\n            int loadDbThreads = 8, \n            int BatchSize = 1 << 12, \n            int keyLen = default, \n            int valueLen = default)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"loadDbThreads: Total number of threads used for loading"}),"\n",(0,i.jsx)(n.li,{children:"BatchSize: Total number of key-value pair in a batch"}),"\n",(0,i.jsx)(n.li,{children:"keyLen: length of a key in bytes."}),"\n",(0,i.jsx)(n.li,{children:"valueLen: length of a value in bytes."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following method is used to run an iteration of the benchmark for a given operation with the specified parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"        public void Run(\n            OpType opType,\n            int TotalOps,\n            int[] NumThreads,\n            int BatchSize = 1 << 12,\n            TimeSpan runTime = default,\n            bool randomGen = true,\n            bool randomServe = true,\n            int keyLen = default,\n            int valueLen = default)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"opType: operation to benchmark"}),"\n",(0,i.jsx)(n.li,{children:"totalops: total ops executed for the given benchmark."}),"\n",(0,i.jsx)(n.li,{children:"NumThreads: Total number of clients used to run the benchmark"}),"\n",(0,i.jsx)(n.li,{children:"BatchSize: Total number of operations in a single batch."}),"\n",(0,i.jsx)(n.li,{children:"runTime: Minimum duration to run the benchmark."}),"\n",(0,i.jsx)(n.li,{children:"randomGen: The order in which keys are generated in the requests."}),"\n",(0,i.jsx)(n.li,{children:"randomServe: The order in which the request buffers are accessed."}),"\n",(0,i.jsx)(n.li,{children:"keyLen: least number of bytes in a single key."}),"\n",(0,i.jsx)(n.li,{children:"valueLen: total number of bytes in a value."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"commands-benchmarked",children:"Commands benchmarked"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"commands"})," that can be benchmarked from each category are:"]}),"\n",(0,i.jsx)(n.h3,{id:"raw-strings-commands",children:"Raw strings commands"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SET"}),"\n",(0,i.jsx)(n.li,{children:"GET"}),"\n",(0,i.jsx)(n.li,{children:"MGET"}),"\n",(0,i.jsx)(n.li,{children:"INCR"}),"\n",(0,i.jsx)(n.li,{children:"SETEX"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bitmaps-commands",children:"Bitmaps commands"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SETBIT"}),"\n",(0,i.jsx)(n.li,{children:"BITOP"}),"\n",(0,i.jsx)(n.li,{children:"GETBIT"}),"\n",(0,i.jsx)(n.li,{children:"BITCOUNT"}),"\n",(0,i.jsx)(n.li,{children:"BITPOS"}),"\n",(0,i.jsx)(n.li,{children:"BITOP_AND"}),"\n",(0,i.jsx)(n.li,{children:"BITOP_OR"}),"\n",(0,i.jsx)(n.li,{children:"BITOP_XOR"}),"\n",(0,i.jsx)(n.li,{children:"BITOP_NOT"}),"\n",(0,i.jsx)(n.li,{children:"BITFIELD_GET"}),"\n",(0,i.jsx)(n.li,{children:"BITFIELD_SET"}),"\n",(0,i.jsx)(n.li,{children:"BITFIELD_INCR"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"hyperloglog-commands",children:"Hyperloglog commands"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PFADD"}),"\n",(0,i.jsx)(n.li,{children:"PFCOUNT"}),"\n",(0,i.jsx)(n.li,{children:"PFMERGE"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sorted-sets--geo-commands",children:"Sorted Sets & Geo commands"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ZADD"}),"\n",(0,i.jsx)(n.li,{children:"GEOADD"}),"\n",(0,i.jsx)(n.li,{children:"ZREM"}),"\n",(0,i.jsx)(n.li,{children:"ZCARD"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"server-commands",children:"Server commands"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PING"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"type-of-benchmarks",children:"Type of benchmarks"}),"\n",(0,i.jsx)(n.h3,{id:"online-benchmarks",children:"Online benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"These options measure performance of the server in a continuous online mode."}),"\n",(0,i.jsx)(n.p,{children:"From the folder:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Garnet/benchmark/Resp.benchmark\n"})}),"\n",(0,i.jsx)(n.p,{children:"For a run with 1 client session:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --online --op-workload GET,SET --op-percent 50,50 -b 1  -t 1\n"})}),"\n",(0,i.jsx)(n.p,{children:"For a run with 16 client sessions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --online --op-workload GET,SET --op-percent 50,50 -b 1  -t 16\n"})}),"\n",(0,i.jsx)(n.p,{children:"For a run using ZADD and ZCARD commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --online --op-workload ZADD,ZCARD --op-percent 50,50 -b 1  -t 1 --keylength --client SERedis\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Where:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"--op-workload: the different commands to send."}),"\n",(0,i.jsx)(n.li,{children:"--online: The type of the benchmark to do."}),"\n",(0,i.jsx)(n.li,{children:"--op-percent: The weight of the load for each command."}),"\n",(0,i.jsx)(n.li,{children:"--t or threads: The number of conexions the tool will create to send the load."}),"\n",(0,i.jsx)(n.li,{children:"--client: The client to use. GarnetClientSession is good option to stress the system to its maximum. SERedis stands for StackExchange.Redis library."}),"\n",(0,i.jsx)(n.li,{children:"--keylength: The length for the size of the key."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"offline-benchmarks",children:"Offline benchmarks"}),"\n",(0,i.jsxs)(n.p,{children:["This category of benchmark use our ",(0,i.jsx)(n.code,{children:"LightClient"})," with pre-created batches, to measure how much throughput the server can achieve for a given period of time."]}),"\n",(0,i.jsx)(n.p,{children:"Some examples of running offline benchmarks are:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --op GET -t 2,4,8,16 -b 512 --dbsize 10241024 --keylength 1024\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --op ZADDCARD -t 64 --b 512 --dbsize 16777216 --keylength 512\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Where:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"--op: the command to send. ZADDCARD will exercise the ZADD and ZCARD in the same run."}),"\n",(0,i.jsx)(n.li,{children:"--t or threads: The number of threads to use."}),"\n",(0,i.jsx)(n.li,{children:"--dbsize: The amount of keys to create in the store"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"preloading-data-for-benchmarks",children:"Preloading data for benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"You can pre-populate the store with keys before running GET benchmarks by performing the following steps:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Execute MSET with the Resp Benchmark tool:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --op MSET --dbsize 16777216 --keylength 512\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then execute the GET command in online mode:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dotnet run -c Release -f net8.0 -- --op-workload GET --online -b 1 --op-percent 100 -t 64 --client GarnetClientSession --itp 1024 --runtime -1 --dbsize 16777216 --keylength 512\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to know how high the hit rate you can execute from any client CLI tool:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"INFO stats\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Look at the ",(0,i.jsx)(n.strong,{children:"garnet_hit_rate"})," metric, the value ideally, should be close to 100."]}),"\n",(0,i.jsx)(n.p,{children:"Metrics need to be enabled in the Garnet server for getting stats with the INFO command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" --latency-monitor --metrics-sampling-freq 5\n"})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);