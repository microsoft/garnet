"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1251],{3746:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"dev/multi-db","title":"Logical Databases","description":"Overview","source":"@site/docs/dev/multi-db.md","sourceDirName":"dev","slug":"/dev/multi-db","permalink":"/garnet/docs/dev/multi-db","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/dev/multi-db.md","tags":[],"version":"current","frontMatter":{"id":"multi-db","sidebar_label":"Logical Databases","title":"Logical Databases"},"sidebar":"garnetDocSidebar","previous":{"title":"Custom Commands","permalink":"/garnet/docs/dev/custom-commands"},"next":{"title":"Collection Broker","permalink":"/garnet/docs/dev/collection-broker"}}');var s=n(74848),i=n(28453);const r={id:"multi-db",sidebar_label:"Logical Databases",title:"Logical Databases"},d=void 0,c={},o=[{value:"Overview",id:"overview",level:2},{value:"Design",id:"design",level:2},{value:"Checkpointing, AOF &amp; Recovery",id:"checkpointing-aof--recovery",level:2}];function l(e){const a={a:"a",br:"br",code:"code",em:"em",h2:"h2",mermaid:"mermaid",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(a.p,{children:["Garnet supports multiple logical databases in a single server instance. This feature is made available ",(0,s.jsx)(a.em,{children:"only when cluster mode is turned off"})," (by default cluster mode is turned off).",(0,s.jsx)(a.br,{}),"\n","The number of allowed logical databases in a server instance can be altered by changing the ",(0,s.jsx)(a.code,{children:"MaxDatabases"})," configuration option (either in your ",(0,s.jsx)(a.code,{children:"garnet.conf"})," file, or via the command line with ",(0,s.jsx)(a.code,{children:"--max-databases"}),"). By default, ",(0,s.jsx)(a.code,{children:"MaxDatabases"})," is set to ",(0,s.jsx)(a.strong,{children:"16"}),"."]}),"\n",(0,s.jsxs)(a.p,{children:["New clients will always connect to the default database (of index ",(0,s.jsx)(a.strong,{children:"0"}),"). To switch database context, you can use the ",(0,s.jsx)(a.a,{href:"/garnet/docs/commands/generic#select",children:"SELECT"})," command."]}),"\n",(0,s.jsx)(a.h2,{id:"design",children:"Design"}),"\n",(0,s.jsxs)(a.p,{children:["Each logical database in Garnet is represented by a ",(0,s.jsx)(a.code,{children:"GarnetDatabase"})," instance. Each such instance holds a reference to the database stores, AOF device as well as other database-specific data.",(0,s.jsx)(a.br,{}),"\n","When the Garnet server instance is created, ",(0,s.jsx)(a.code,{children:"StoreWrapper"})," instantiates a server-wide ",(0,s.jsx)(a.code,{children:"IDatabaseManager"}),", which by default is a ",(0,s.jsx)(a.code,{children:"SingleDatabaseManager"})," that that holds the default database.",(0,s.jsx)(a.br,{}),"\n","The ",(0,s.jsx)(a.code,{children:"IDatabaseManager"})," can be later upgraded to a ",(0,s.jsx)(a.code,{children:"MultipleDatabaseManager"}),", if a non-zero database index is selected.",(0,s.jsx)(a.br,{}),"\n",(0,s.jsx)(a.code,{children:"StoreWrapper"})," in turn calls the ",(0,s.jsx)(a.code,{children:"IDatabaseManager"})," to perform actions as checkpointing, AOF commits etc., which at each different implementation of ",(0,s.jsx)(a.code,{children:"IDatabaseManager"})," will handle those in either a single-database or multiple-database context."]}),"\n",(0,s.jsxs)(a.p,{children:["Each ",(0,s.jsx)(a.code,{children:"RespServerSession"})," manages a map of ",(0,s.jsx)(a.code,{children:"GarnetDatabaseSession"})," instances, which represent per-database session data. Each ",(0,s.jsx)(a.code,{children:"GarnetDatabaseSession"})," holds an instance of ",(0,s.jsx)(a.code,{children:"StorageSession"})," as well as ",(0,s.jsx)(a.code,{children:"GarnetApi"})," instances and a ",(0,s.jsx)(a.code,{children:"TransactionManager"})," instance.",(0,s.jsx)(a.br,{}),"\n","Whenever a client chooses to interact with a database it hasn't interacted with before (using ",(0,s.jsx)(a.code,{children:"SELECT"}),", for instance), a new ",(0,s.jsx)(a.code,{children:"GarnetDatabaseSession"})," will be created.",(0,s.jsx)(a.br,{}),"\n","Each time the client calls ",(0,s.jsx)(a.code,{children:"SELECT"}),", the ",(0,s.jsx)(a.code,{children:"RespServerSession"})," would switch its context based on the appropriate ",(0,s.jsx)(a.code,{children:"GarnetDatabaseSession"})," instance."]}),"\n",(0,s.jsx)(a.mermaid,{value:'flowchart LR\n    accTitle: Multi Database Design\n    accDescr: Garnet\'s multi database design\n    srv[GarnetServer]\n    sw[StoreWrapper]\n    idbm[IDatabaseManager]\n    sdbm[SingleDatabaseManager]\n    mdbm[MultiDatabaseManager]\n    db0["GarnetDatabase (idx 0)"]\n    db1["GarnetDatabase (idx 1)"]\n    db2["GarnetDatabase (idx 2)"]\n    db3["..."]\n    dbn["GarnetDatabase (idx n)"]\n    srv --\x3e sw\n    sw --\x3e idbm\n    idbm -.-> sdbm\n    idbm -.-> mdbm\n    sdbm --\x3e db0\n    mdbm --\x3e db0\n    mdbm --\x3e db1\n    mdbm --\x3e db2\n    mdbm --\x3e db3\n    mdbm --\x3e dbn'}),"\n",(0,s.jsx)(a.h2,{id:"checkpointing-aof--recovery",children:"Checkpointing, AOF & Recovery"}),"\n",(0,s.jsxs)(a.p,{children:["Each database's store data will be separately stored on its own directory. Checkpoints are stored in ",(0,s.jsx)(a.code,{children:"CheckpointDir"})," defined in the confguration (and if not specified defaults to ",(0,s.jsx)(a.code,{children:"LogDir"}),"). Each store checkpoint data will then be stored in ",(0,s.jsx)(a.code,{children:"Store/checkpoints"})," and ",(0,s.jsx)(a.code,{children:"ObjectStore/checkpoints"})," respectively for the default database or in ",(0,s.jsx)(a.code,{children:"Store/checkpoints_i"})," and ",(0,s.jsx)(a.code,{children:"ObjectStore/checkpoints_i"})," for database of index ",(0,s.jsx)(a.code,{children:"i"}),".",(0,s.jsx)(a.br,{}),"\n","Similarly, AOF data will be stored in the same  ",(0,s.jsx)(a.code,{children:"CheckpointDir"})," (and if not specified defaults to ",(0,s.jsx)(a.code,{children:"LogDir"}),"). Each database AOF data will be stored in ",(0,s.jsx)(a.code,{children:"AOF"})," for the default database or in ",(0,s.jsx)(a.code,{children:"AOF_i"})," for database of index ",(0,s.jsx)(a.code,{children:"i"}),"."]}),"\n",(0,s.jsx)(a.p,{children:"Upon recovery, Garnet will extract the indexes of the saved databases from the aforementioned directory name pattern and recover any saved data matching the database index."})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>d});var t=n(96540);const s={},i=t.createContext(s);function r(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);