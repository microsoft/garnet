"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9155],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(96540);const t={},l=a.createContext(t);function r(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(l.Provider,{value:n},e.children)}},44389:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"commands/transactions-commands","title":"Transactions","description":"Details and examples about how RESP Transactions are implemented in Garnet are found at the Developer Guide","source":"@site/docs/commands/transactions.md","sourceDirName":"commands","slug":"/commands/transactions","permalink":"/garnet/docs/commands/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/garnet/tree/main/website/docs/commands/transactions.md","tags":[],"version":"current","frontMatter":{"id":"transactions-commands","sidebar_label":"Transactions","title":"Transactions","slug":"transactions"},"sidebar":"garnetDocSidebar","previous":{"title":"Checkpoint","permalink":"/garnet/docs/commands/checkpoint"},"next":{"title":"Cluster Commands","permalink":"/garnet/docs/commands/cluster"}}');var t=s(74848),l=s(28453);const r={id:"transactions-commands",sidebar_label:"Transactions",title:"Transactions",slug:"transactions"},i=void 0,c={},d=[{value:"DISCARD",id:"discard",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Resp Reply",id:"resp-reply",level:4},{value:"EXEC",id:"exec",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Resp Reply",id:"resp-reply-1",level:4},{value:"MULTI",id:"multi",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"Resp Reply",id:"resp-reply-2",level:4},{value:"UNWATCH",id:"unwatch",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"Resp Reply",id:"resp-reply-3",level:4},{value:"WATCH",id:"watch",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"Resp Reply",id:"resp-reply-4",level:4}];function o(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Details and examples about how RESP Transactions are implemented in Garnet are found at the ",(0,t.jsx)(n.a,{href:"../dev/transactions",children:"Developer Guide"})]}),"\n",(0,t.jsx)(n.h3,{id:"discard",children:"DISCARD"}),"\n",(0,t.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    DISCARD\n"})}),"\n",(0,t.jsx)(n.p,{children:"Flushes all previously queued commands in a transaction and restores the connection state to normal."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply",children:"Resp Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"exec",children:"EXEC"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    EXEC\n"})}),"\n",(0,t.jsx)(n.p,{children:"Executes all previously queued commands in a transaction and restores the connection state to normal."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-1",children:"Resp Reply"}),"\n",(0,t.jsx)(n.p,{children:"One of the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Array reply: each element being the reply to each of the commands in the atomic transaction."}),"\n",(0,t.jsx)(n.li,{children:"Nil reply: the transaction was aborted because a WATCHed key was touched."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"multi",children:"MULTI"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-2",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    MULTI\n"})}),"\n",(0,t.jsx)(n.p,{children:"Marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-2",children:"Resp Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"unwatch",children:"UNWATCH"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-3",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    UNWATCH\n"})}),"\n",(0,t.jsx)(n.p,{children:"Flushes all the previously watched keys for a transaction."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-3",children:"Resp Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"watch",children:"WATCH"}),"\n",(0,t.jsx)(n.h4,{id:"syntax-4",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"    WATCH key [key ...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Marks the given keys to be watched for conditional execution of a transaction."}),"\n",(0,t.jsx)(n.h4,{id:"resp-reply-4",children:"Resp Reply"}),"\n",(0,t.jsx)(n.p,{children:"Simple string reply: OK."}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);