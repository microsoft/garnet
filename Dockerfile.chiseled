FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ARG TARGETARCH

RUN mkdir /data \
    && chown -R $APP_UID:$APP_UID /data

WORKDIR /src

# Copy csproj and restore as distinct layers
COPY libs/client/*.csproj libs/client/
COPY libs/cluster/*.csproj libs/cluster/
COPY libs/common/*.csproj libs/common/
COPY libs/host/*.csproj libs/host/
COPY libs/server/*.csproj libs/server/
COPY libs/resources/*.csproj libs/resources/
COPY libs/storage/Tsavorite/cs/src/core/*.csproj libs/storage/Tsavorite/cs/src/core/
COPY libs/storage/Tsavorite/cs/src/devices/AzureStorageDevice/*.csproj libs/storage/Tsavorite/cs/src/devices/AzureStorageDevice/
COPY main/GarnetServer/*.csproj main/GarnetServer/
COPY metrics/HdrHistogram/*.csproj metrics/HdrHistogram/
COPY Directory.Build.props Directory.Build.props
COPY Directory.Packages.props Directory.Packages.props
COPY Version.props Version.props
COPY .editorconfig .editorconfig

RUN dotnet restore main/GarnetServer/GarnetServer.csproj -a $TARGETARCH

# Copy everthing else and publish app
COPY Garnet.snk Garnet.snk
COPY libs/ libs/
COPY main/ main/
COPY metrics/ metrics/
COPY test/testcerts test/testcerts

# Set protected mode to no for Docker images
RUN sed -i 's/"ProtectedMode": "yes",/"ProtectedMode": "no",/' /src/libs/host/defaults.conf

WORKDIR /src/main/GarnetServer
RUN dotnet publish -a $TARGETARCH -c Release -o /app --no-restore --self-contained false -f net8.0 -p:EnableSourceLink=false -p:EnableSourceControlManagerQueries=false

# Delete xmldoc files
RUN find /app -name '*.xml' -delete

# --- Lua builder stage ---
FROM ubuntu:22.04 AS lua-builder
RUN apt-get update \
    && apt-get install -y --no-install-recommends liblua5.4-0 dpkg-dev \
    && ARCH="$(dpkg-architecture -qDEB_HOST_MULTIARCH)" \
    && mkdir -p /lua \
    && cp "/usr/lib/${ARCH}/liblua5.4.so.0" /lua/ \
    && ln -sf "liblua5.4.so.0" /lua/liblua54.so \
    && rm -rf /var/lib/apt/lists/*

# --- .NET build and layout prep ---
FROM mcr.microsoft.com/dotnet/runtime:8.0-jammy AS prep-runtime

# prep-runtime image HAS /bin/sh, so we can script here
COPY --from=lua-builder /lua /lua
RUN DN_DIR=$(ls -d /usr/share/dotnet/shared/Microsoft.NETCore.App/* | head -n1) \
    && cp /lua/liblua54.so "$DN_DIR/liblua54.so"

# Final stage/image
FROM mcr.microsoft.com/dotnet/runtime:8.0-jammy-chiseled AS runtime
WORKDIR /app

COPY --from=build --chown=$APP_UID:$APP_UID /data /data
# Copy the pre-symlinked .NET shared directory from prep-runtime
COPY --from=prep-runtime /usr/share/dotnet/shared /usr/share/dotnet/shared
COPY --from=build /app .

VOLUME /data

# For inter-container communication.
EXPOSE 6379

ENTRYPOINT ["/app/GarnetServer"]
