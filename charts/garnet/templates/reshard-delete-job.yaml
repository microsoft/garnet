apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "garnet.fullname" . }}-reshard
  labels:
    {{- include "garnet.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "0"
spec:
  backoffLimit: {{ .Values.cluster.initJob.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.cluster.initJob.ttlSecondsAfterFinished }}
  template:
    spec:
      containers:
        - name: reshard
          image: "{{ .Values.cluster.initJob.image.registry }}/{{ .Values.cluster.initJob.image.repository }}:{{ .Values.cluster.initJob.image.tag | default "latest" }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              garnet_host="{{ include "garnet.fullname" . }}-0.{{ include "garnet.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local"
              garnet_port="{{ .Values.containers.port }}"

              LOG_FILE="/tmp/reshard.log"

              echo "Starting resharding process..." | tee -a $LOG_FILE
              
              get_current_nodes() {
                /usr/local/bin/redis-cli -h "$garnet_host" -p "$garnet_port" CLUSTER NODES | grep master | awk -F ',' '{print $2}' | awk '{print $1}'
              }

              current_nodes=$(get_current_nodes)
              desired_nodes=$(for i in $(seq 0 $(({{ .Values.cluster.statefulSet.replicas }} - 1))); do printf "%s-%d.%s-headless.%s.svc.cluster.local " "{{ include "garnet.fullname" . }}" "$i" "{{ include "garnet.fullname" . }}" "{{ .Release.Namespace }}"; done)
              echo "Desired nodes: $desired_nodes" | tee -a $LOG_FILE

              nodes_to_remove=""
              for node in $current_nodes; do
                if ! echo "$desired_nodes" | grep -q "$node"; then
                  nodes_to_remove="$nodes_to_remove $node"
                fi
              done
              echo "Nodes to remove: $nodes_to_remove" | tee -a $LOG_FILE

              total_nodes_to_share_to="{{ .Values.cluster.statefulSet.replicas }}"

              for node in $nodes_to_remove; do
                node_id=$(/usr/local/bin/redis-cli -h "$node" -p "$garnet_port" CLUSTER NODES | grep myself | awk '{print $1}')
                slots=$(/usr/local/bin/redis-cli -h "$node" -p "$garnet_port" CLUSTER NODES | grep "$node_id" | awk '{for(i=9;i<=NF;i++) print $i}')
                echo "Slots: $slots" | tee -a $LOG_FILE
                
                num_slots=0
                for range in $slots; do
                  start_slot=$(echo $range | cut -d'-' -f1)
                  end_slot=$(echo $range | cut -d'-' -f2)
                  if [ -z "$end_slot" ]; then
                    end_slot=$start_slot
                  fi
                  num_slots=$((num_slots + end_slot - start_slot + 1))
                  echo "Range: $range, Start Slot: $start_slot, End Slot: $end_slot, Accumulated Slots: $num_slots" | tee -a $LOG_FILE
                done
                echo "Node $node_id manages $num_slots slots" | tee -a $LOG_FILE

                slots_to_be_distributed=$((num_slots / total_nodes_to_share_to))
                remainder=$((num_slots % total_nodes_to_share_to))

                for target_node in $desired_nodes; do
                  target_node_id=$(/usr/local/bin/redis-cli -h "$target_node" -p "$garnet_port" CLUSTER NODES | grep myself | awk '{print $1}')
                  echo "Resharding $slots_to_be_distributed slots from $node_id to $target_node_id" | tee -a $LOG_FILE
                  /usr/local/bin/redis-cli --cluster reshard "$garnet_host:$garnet_port" --cluster-from "$node_id" --cluster-to "$target_node_id" --cluster-slots "$slots_to_be_distributed" --cluster-yes >> $LOG_FILE 2>&1
                  sleep 5
                done

                while [ $remainder -ne 0 ]; do
                  for target_node in $desired_nodes; do
                    if [ $remainder -eq 0 ]; then
                      break
                    fi
                    target_node_id=$(/usr/local/bin/redis-cli -h "$target_node" -p "$garnet_port" CLUSTER NODES | grep myself | awk '{print $1}')
                    echo "Resharding 1 slot from $node_id to $target_node_id" | tee -a $LOG_FILE
                    /usr/local/bin/redis-cli --cluster reshard "$garnet_host:$garnet_port" --cluster-from "$node_id" --cluster-to "$target_node_id" --cluster-slots 1 --cluster-yes >> $LOG_FILE 2>&1
                    sleep 5
                    remainder=$((remainder - 1))
                  done
                done
                echo "Deleting node $node_id" | tee -a $LOG_FILE
                /usr/local/bin/redis-cli --cluster del-node "$garnet_host:$garnet_port" "$node_id" >> $LOG_FILE 2>&1
              done

              echo "Resharding process completed." | tee -a $LOG_FILE
      restartPolicy: Never
  backoffLimit: 1