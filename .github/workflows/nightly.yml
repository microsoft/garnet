name: Garnet Nightly Tests
on:
  schedule:
    - cron:  '0 9 * * *' # Runs at 09:00 UTC, which is 1:00 AM PST
  workflow_dispatch:
  
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

permissions:
  contents: read
  
jobs:
  build-test-garnet:
    name: Garnet
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04, windows-2022, windows-2025 ]
        framework: [ 'net8.0', 'net9.0' ]
        configuration: [ 'Debug', 'Release' ]
        test: [ 'Garnet.test', 'Garnet.test.cluster' ]

    steps:
      - name: Install Allure CLI
        shell: pwsh
        run: |
            if ($env:RUNNER_OS -eq "Windows") {
              Set-ExecutionPolicy RemoteSigned -Scope Process -Force
              iwr -useb get.scoop.sh | iex
              scoop install allure
              $shimPath = "$env:USERPROFILE\scoop\shims"
              echo "Adding Scoop shims to PATH: $shimPath"
              echo "$shimPath" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH
            } elseif ($env:RUNNER_OS -eq "Linux") {
              npm install -g allure-commandline --save-dev
            } else {
              Write-Host "Unsupported OS: $env:RUNNER_OS"
              exit 1
            }
      - name: Verify Allure installation
        run: allure --version
        shell: pwsh

      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Install dependencies
        run: dotnet restore
# DEBUG      - name: Check style format
# DEBUG        run: dotnet format --verify-no-changes --verbosity diagnostic
      - name: Build Garnet
        run: dotnet build --configuration ${{ matrix.configuration }}
# DEBUG      - name: Run tests ${{ matrix.test }}
# DEBUG        run: dotnet test test/${{ matrix.test }} -f ${{ matrix.framework }} --logger "console;verbosity=detailed" --logger trx --results-directory "GarnetTestResults-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}-${{ matrix.test }}"
# DEBUG        timeout-minutes: 45 
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-garnet-results-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}-${{ matrix.test }}
          path: GarnetTestResults-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}-${{ matrix.test }}
        if: ${{ always() }}

      - name: DEBUG Debug path existence using matrix variables
        shell: pwsh
        run: |
          $source = "${{ github.workspace }}/test/Allure/TestData/${{ matrix.framework }}/allure-results"
          Write-Host "Checking source path: $source"
          if (Test-Path $source) {
            Write-Host "Source path exists."
          } else {
            Write-Host "Source path does NOT exist."
          }

# DELETE      - name: Copy mock allure-results to test output - just use until get real allure results in place
# DEBUG        shell: pwsh
# DEBUG        run: |
# DEBUG          $source = "${{ github.workspace }}/test/Allure/TestData/${{ matrix.framework }}/allure-results"
# DEBUG          $dest   = "${{ github.workspace }}/test/${{ matrix.test }}/bin/${{ matrix.configuration }}/${{ matrix.framework }}/allure-results"
# DEBUG          Copy-Item -Path $source -Destination $dest -Recurse -Force

      - name: Copy mock allure-results to test output
        shell: pwsh
        run: |
          $source = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "test/Allure/TestData/${{ matrix.framework }}/allure-results"
          $dest   = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "test/${{ matrix.test }}/bin/${{ matrix.configuration }}/${{ matrix.framework }}/allure-results"
          Copy-Item -Path $source -Destination $dest -Recurse -Force

      - name: DEBUG Check if allure-results exists
        run: |
          if (-Not (Test-Path "${{ github.workspace }}/test/${{ matrix.test }}/bin/${{ matrix.configuration }}/${{ matrix.framework }}/allure-results")) {
            Write-Host "No ${{ github.workspace }}/test/${{ matrix.test }}/bin/${{ matrix.configuration }}/${{ matrix.framework }}/allure-results found for this matrix combination."
          }

      - name: Stage allure-results into test/Allure/AllResults
        run: |
          $source = "${{ github.workspace }}/test/${{ matrix.test }}/bin/${{ matrix.configuration }}/${{ matrix.framework }}/allure-results"
          $target = "${{ github.workspace }}/test/Allure/AllResults"
          New-Item -ItemType Directory -Path $target -Force
          Copy-Item -Path "$source\*" -Destination $target -Recurse -Force
        shell: pwsh

      - name: Upload All Results to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AllureResults-${{ matrix.framework }}-${{ matrix.configuration }}-${{ matrix.test }}
          path: test/Allure/AllResults
          
        if: ${{ always() }}

  # Job to build and test Tsavorite code
  build-test-tsavorite:        
    name: Tsavorite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04, windows-2022, windows-2025 ]
        framework: [ 'net8.0', 'net9.0' ]
        configuration: [ 'Debug', 'Release' ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set workaround for libaio on Ubuntu 24.04 (see https://askubuntu.com/questions/1512196/libaio1-on-noble/1512197#1512197)
        run: |
          sudo ln -s /usr/lib/x86_64-linux-gnu/libaio.so.1t64 /usr/lib/x86_64-linux-gnu/libaio.so.1
        if: ${{ matrix.os == 'ubuntu-24.04' }}        
      - name: Set environment variable for Linux
        run: echo "RunAzureTests=yes" >> $GITHUB_ENV
        if: ${{ matrix.os == 'ubuntu-24.04' }}
      - name: Set environment variable for Windows
        run: echo ("RunAzureTests=yes") >> $env:GITHUB_ENV
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Setup Node.js for Azurite
        uses: actions/setup-node@v4
        with:
          node-version: '20'
# DEBUG      - name: Install and Run Azurite
# DEBUG        shell: bash
# DEBUG        run: |
# DEBUG          npm install -g azurite
# DEBUG          azurite &
# DEBUG      - name: Install dependencies
# DEBUG        run: dotnet restore
# DEBUG      - name: Format
# DEBUG        run: dotnet format --verify-no-changes --verbosity diagnostic
# DEBUG      - name: Build Tsavorite
# DEBUG        run: dotnet build libs/storage/Tsavorite/cs/test/Tsavorite.test.csproj --configuration ${{ matrix.configuration }}
# DEBUG      - name: Run Tsavorite tests
# DEBUG        run: dotnet test libs/storage/Tsavorite/cs/test/Tsavorite.test.csproj -f ${{ matrix.framework }} --logger "console;verbosity=detailed" --logger trx --results-directory "TsavoriteTestResults-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}"
# DEBUG        timeout-minutes: 45 
# DEBUG      - name: Upload test results
# DEBUG        uses: actions/upload-artifact@v4
# DEBUG        with:
# DEBUG          name: dotnet-tsavorite-results-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}
# DEBUG          path: TsavoriteTestResults-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}
# DEBUG        if: ${{ always() }}

  generate-allure-report:
    name: Generate Allure Report
    runs-on: windows-2022  
    needs: [ build-test-garnet, build-test-tsavorite ]
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Allure CLI
        shell: pwsh
        run: |
            if ($env:RUNNER_OS -eq "Windows") {
              Set-ExecutionPolicy RemoteSigned -Scope Process -Force
              iwr -useb get.scoop.sh | iex
              scoop install allure
              $shimPath = "$env:USERPROFILE\scoop\shims"
              echo "Adding Scoop shims to PATH: $shimPath"
              echo "$shimPath" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH
            } elseif ($env:RUNNER_OS -eq "Linux") {
              npm install -g allure-commandline --save-dev
            } else {
              Write-Host "Unsupported OS: $env:RUNNER_OS"
              exit 1
            }

      - name: Download all test result artifacts
        uses: actions/download-artifact@v4
        with:
          path: test/Allure/AllResults

      - name: DEBUG Show working directory and contents
        shell: pwsh
        run: |
          $cwd = Get-Location
          Write-Host "Current directory: $cwd"
          Get-ChildItem -Force

      - name: DEBUG Check if GenerateAllureReport.ps1 exists
        shell: pwsh
        run: |
          $scriptPath = "${{ github.workspace }}\test\Allure\GenerateAllureReport.ps1"
          if (Test-Path $scriptPath) {
            Write-Host "Script found at $scriptPath"
          } else {
            Write-Host "Script NOT found at $scriptPath"
          }

      - name: DEBUG List contents of test/allure/AllResults
        shell: pwsh
        run: Get-ChildItem "${{ github.workspace }}\test\allure\AllResults" -Recurse

      - name: Copy all results into one folder (CombinedResults)
        shell: pwsh
        run: |
          $source = "${{ github.workspace }}\test\Allure\AllResults"
          $target = "${{ github.workspace }}\test\Allure\CombinedResults"
          New-Item -ItemType Directory -Path $target -Force
          Get-ChildItem -Recurse -File $source | ForEach-Object {
            Copy-Item $_.FullName -Destination $target -Force
          }

      - name: DEBUG List contents of test/allure/CombinedResults
        shell: pwsh
        run: Get-ChildItem "${{ github.workspace }}\test\allure\CombinedResults" -Recurse

      - name: Run GenerateAllureReport.ps1
        shell: pwsh
        run: |
          Set-Location "${{ github.workspace }}\test\Allure"
          .\GenerateAllureReport.ps1

      - name: Upload Allure HTML report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: test/Allure/allure-report

      - name: Echo completion
        run: echo Done!
