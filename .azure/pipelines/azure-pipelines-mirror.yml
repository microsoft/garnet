resources:
  repositories:
  - repository: GarnetGithubRepo
    type: github
    name: microsoft/garnet
    endpoint: ADO_to_Github_ServiceConnection
    trigger:
      branches:
        include:
        - main

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: MirrorGithubToADO
  displayName: 'Mirror GitHub main to Azure DevOps main'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: GarnetGithubRepo
    clean: true
    persistCredentials: true

  - script: |
      # Set up Git identity  
      git config user.email "$(GIT_USER_EMAIL)"
      git config user.name "$(GIT_USER_NAME)"
      git config --global credential.helper 'cache --timeout=3600'

      # Fetch the latest changes from the GitHub main branch
      git fetch origin main

      # Check out main branch locally
      # git checkout main

      # Ensure the local main branch is checked out and reset to match origin/main
      git checkout -B main origin/main

      # Reset the main branch to match the origin/main branch
      # git reset --hard origin/main

      # Push the updated main branch to Azure DevOps - make sure to get the config files each push so compliant with security policy
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" remote add vso https://dev.azure.com/msresearch/_git/Garnet
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" fetch vso cfs-remediation
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" cherry-pick 0bae2b8a7d3dc9bfc59d25acf30b470ff97f6a7f
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push --force https://dev.azure.com/msresearch/_git/Garnet main

    displayName: 'Mirror GitHub main to Azure DevOps main'
    env:
      GIT_USER_EMAIL: $(GIT_USER_EMAIL)
      GIT_USER_NAME: $(GIT_USER_NAME)
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)