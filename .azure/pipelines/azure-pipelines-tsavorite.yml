trigger:
  paths:
    include:
    - libs/storage/Tsavorite/*
 
variables:
  solution: 'Garnet.sln'
  RunAzureTests: 'yes'

jobs:
- job: 'csharpWindows'
  pool:
    vmImage: windows-latest
  displayName: 'C# (Windows)'
  timeoutInMinutes: 125

  strategy:
    maxParallel: 2
    matrix:
      AnyCPU-Debug:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Debug'
      AnyCPU-Release:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'

  steps:
  - task: UseDotNet@2
    displayName: Use .NET 8.0
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  - task: NodeTool@0
    displayName: Node Tool
    inputs:
      versionSpec: 14.x

  - script : npm install -g azurite
    displayName: Install Azurite

  - script : start /B azurite
    displayName: Start Azurite

  - task: NuGetAuthenticate@1
    displayName: Nuget Authenticate

  - task: NuGetToolInstaller@1
    displayName: Nuget Tool Installer
    inputs:
      versionspec: '*'
      checkLatest: true

  - script: nuget restore
    displayName: Nuget Restore

  - task: DotNetCoreCLI@2
    displayName: 'Build Tsavorite binaries and tests $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/Tsavorite.test.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests for Tsavorite on $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/Tsavorite.test.csproj'
      arguments: '--configuration $(buildConfiguration) --logger:"console;verbosity=detailed"'
      
  - task: DotNetCoreCLI@2
    displayName: 'Build Garnet Cluster binaries and tests $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/Garnet.test.cluster.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests for Garnet Cluster on $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/Garnet.test.cluster.csproj'
      arguments: '--configuration $(buildConfiguration) --logger:"console;verbosity=detailed"'

  - task: DotNetCoreCLI@2
    displayName: 'Build Garnet binaries and tests $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/Garnet.test.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests for Garnet on $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/Garnet.test.csproj'
      arguments: '--configuration $(buildConfiguration) --logger:"console;verbosity=detailed"'
      
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      searchFolder: '$(Agent.TempDirectory)'

- job: 'csharpLinux'
  pool:
    vmImage: ubuntu-latest
  displayName: 'C# (Linux)'
  timeoutInMinutes: 125

  strategy:
    maxParallel: 2
    matrix:
      AnyCPU-Debug:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Debug'
      AnyCPU-Release:
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'

  steps:
  - task: UseDotNet@2
    displayName: Use .NET 8.0
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  - bash: |
      sudo npm install -g azurite
      sudo mkdir azurite
      sudo azurite --silent --location azurite --debug azurite\debug.log &
    displayName: 'Install and Run Azurite'
      
  - task: NuGetAuthenticate@1
    displayName: Nuget Authenticate

  - task: UseDotNet@2 # Optional if the .NET Core SDK is already installed
    displayName: Use .NET

  - script: dotnet restore
    displayName: .NET Restore

  - task: DotNetCoreCLI@2
    displayName: '.NET Core build Tsavorite binaries and tests $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/Tsavorite.test.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests for Tsavorite on $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/Tsavorite.test.csproj'
      arguments: '--configuration $(buildConfiguration) --logger:"console;verbosity=detailed"'
      
  - task: DotNetCoreCLI@2
    displayName: '.NET Core build Garnet binaries and tests $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/Garnet.test.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests for Garnet $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/Garnet.test.csproj'
      arguments: '--configuration $(buildConfiguration) --logger:"console;verbosity=detailed"'
      publishTestResults: true
      
  - task: DotNetCoreCLI@2
    displayName: '.NET Core build Cluster binaries and tests $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/Garnet.test.cluster.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Tests for Garnet Cluster $(buildConfiguration)'
    inputs:
      command: test
      projects: '**/Garnet.test.cluster.csproj'
      arguments: '--configuration $(buildConfiguration) --logger:"console;verbosity=detailed"'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '*.trx'
      searchFolder: '$(Agent.TempDirectory)'
